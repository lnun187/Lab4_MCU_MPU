
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e2c  08002e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e50  08002e50  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08002e50  08002e50  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e50  08002e50  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e50  08002e50  00012e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08002e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200000a4  08002efc  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08002efc  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc22  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fa  00000000  00000000  0002fcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  000323f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  00032ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001837c  00000000  00000000  000338b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db2d  00000000  00000000  0004bc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085bde  00000000  00000000  00059759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df337  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c80  00000000  00000000  000df38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e14 	.word	0x08002e14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	08002e14 	.word	0x08002e14

0800014c <testLed>:
 */
#ifndef SRC_BLINKYLED_C_
#define SRC_BLINKYLED_C_

#include "blinkyLed.h"
void testLed(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin ( blinkyLed_GPIO_Port , blinkyLed_Pin );
 8000150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <testLed+0x14>)
 8000156:	f001 fd86 	bl	8001c66 <HAL_GPIO_TogglePin>
//	HAL_GPIO_WritePin(blinkyLed_GPIO_Port, blinkyLed_Pin, isTimerExpired(4));
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010c00 	.word	0x40010c00

08000164 <buttonReading>:
int count;
GPIO_TypeDef *port[N0_OF_BUTTONS] = { butt1_GPIO_Port, butt2_GPIO_Port,
butt3_GPIO_Port };
uint16_t pin[N0_OF_BUTTONS] = { butt1_Pin, butt2_Pin, butt3_Pin };

void buttonReading() {
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
	for (unsigned int i = 0; i < N0_OF_BUTTONS; i++) {
 800016a:	2300      	movs	r3, #0
 800016c:	607b      	str	r3, [r7, #4]
 800016e:	e058      	b.n	8000222 <buttonReading+0xbe>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000170:	4a30      	ldr	r2, [pc, #192]	; (8000234 <buttonReading+0xd0>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	4413      	add	r3, r2
 8000176:	7819      	ldrb	r1, [r3, #0]
 8000178:	4a2f      	ldr	r2, [pc, #188]	; (8000238 <buttonReading+0xd4>)
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	4413      	add	r3, r2
 800017e:	460a      	mov	r2, r1
 8000180:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(port[i], pin[i]);
 8000182:	4a2e      	ldr	r2, [pc, #184]	; (800023c <buttonReading+0xd8>)
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800018a:	492d      	ldr	r1, [pc, #180]	; (8000240 <buttonReading+0xdc>)
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000192:	4619      	mov	r1, r3
 8000194:	4610      	mov	r0, r2
 8000196:	f001 fd37 	bl	8001c08 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	4619      	mov	r1, r3
 800019e:	4a25      	ldr	r2, [pc, #148]	; (8000234 <buttonReading+0xd0>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4413      	add	r3, r2
 80001a4:	460a      	mov	r2, r1
 80001a6:	701a      	strb	r2, [r3, #0]
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 80001a8:	4a22      	ldr	r2, [pc, #136]	; (8000234 <buttonReading+0xd0>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	4413      	add	r3, r2
 80001ae:	781a      	ldrb	r2, [r3, #0]
 80001b0:	4921      	ldr	r1, [pc, #132]	; (8000238 <buttonReading+0xd4>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	440b      	add	r3, r1
 80001b6:	781b      	ldrb	r3, [r3, #0]
 80001b8:	429a      	cmp	r2, r3
 80001ba:	d108      	bne.n	80001ce <buttonReading+0x6a>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 80001bc:	4a1d      	ldr	r2, [pc, #116]	; (8000234 <buttonReading+0xd0>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	4413      	add	r3, r2
 80001c2:	7819      	ldrb	r1, [r3, #0]
 80001c4:	4a1f      	ldr	r2, [pc, #124]	; (8000244 <buttonReading+0xe0>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	4413      	add	r3, r2
 80001ca:	460a      	mov	r2, r1
 80001cc:	701a      	strb	r2, [r3, #0]
		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 80001ce:	4a1d      	ldr	r2, [pc, #116]	; (8000244 <buttonReading+0xe0>)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4413      	add	r3, r2
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d116      	bne.n	8000208 <buttonReading+0xa4>
//			if(!isTimerExpired(i + 4)) buttonBuffer[i] = BUTTON_IS_RELEASED;
//			if(isTimerExpired(i + 4)){
//				setTimer(i + 4, 50);
//			}
			// if a button is pressed , we start counting
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 80001da:	4a1b      	ldr	r2, [pc, #108]	; (8000248 <buttonReading+0xe4>)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001e2:	2b31      	cmp	r3, #49	; 0x31
 80001e4:	d80a      	bhi.n	80001fc <buttonReading+0x98>
				counterForButtonPress1s[i]++;
 80001e6:	4a18      	ldr	r2, [pc, #96]	; (8000248 <buttonReading+0xe4>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001ee:	3301      	adds	r3, #1
 80001f0:	b299      	uxth	r1, r3
 80001f2:	4a15      	ldr	r2, [pc, #84]	; (8000248 <buttonReading+0xe4>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80001fa:	e00f      	b.n	800021c <buttonReading+0xb8>
//				setTimer(3, 500);
//				SCH_Add_Task(t3, 50, 0);
			} else {
				// the flag is turned on when 1 second has passed
				// since the button is pressed .
				flagForButtonPress1s[i] = 1;
 80001fc:	4a13      	ldr	r2, [pc, #76]	; (800024c <buttonReading+0xe8>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	4413      	add	r3, r2
 8000202:	2201      	movs	r2, #1
 8000204:	701a      	strb	r2, [r3, #0]
 8000206:	e009      	b.n	800021c <buttonReading+0xb8>
				// todo
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000208:	4a0f      	ldr	r2, [pc, #60]	; (8000248 <buttonReading+0xe4>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2100      	movs	r1, #0
 800020e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000212:	4a0e      	ldr	r2, [pc, #56]	; (800024c <buttonReading+0xe8>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4413      	add	r3, r2
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
	for (unsigned int i = 0; i < N0_OF_BUTTONS; i++) {
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	3301      	adds	r3, #1
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b02      	cmp	r3, #2
 8000226:	d9a3      	bls.n	8000170 <buttonReading+0xc>
		}
	}
}
 8000228:	bf00      	nop
 800022a:	bf00      	nop
 800022c:	3708      	adds	r7, #8
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000004 	.word	0x20000004
 8000238:	20000008 	.word	0x20000008
 800023c:	2000000c 	.word	0x2000000c
 8000240:	20000018 	.word	0x20000018
 8000244:	20000000 	.word	0x20000000
 8000248:	200000d0 	.word	0x200000d0
 800024c:	200000d8 	.word	0x200000d8

08000250 <isButtonPressed>:
int isButtonPressed(unsigned int index) {
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	if (index >= N0_OF_BUTTONS)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2b02      	cmp	r3, #2
 800025c:	d901      	bls.n	8000262 <isButtonPressed+0x12>
		return 0;
 800025e:	2300      	movs	r3, #0
 8000260:	e013      	b.n	800028a <isButtonPressed+0x3a>
	if (buttonBuffer[index] == BUTTON_IS_PRESSED
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <isButtonPressed+0x44>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	4413      	add	r3, r2
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d10c      	bne.n	8000288 <isButtonPressed+0x38>
			&& counterForButtonPress1s[index] < 2) {
 800026e:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <isButtonPressed+0x48>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d806      	bhi.n	8000288 <isButtonPressed+0x38>
		buttonBuffer[index] = BUTTON_IS_RELEASED;
 800027a:	4a06      	ldr	r2, [pc, #24]	; (8000294 <isButtonPressed+0x44>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4413      	add	r3, r2
 8000280:	2201      	movs	r2, #1
 8000282:	701a      	strb	r2, [r3, #0]
		return 1;
 8000284:	2301      	movs	r3, #1
 8000286:	e000      	b.n	800028a <isButtonPressed+0x3a>
	}
	return 0;
 8000288:	2300      	movs	r3, #0
//	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
}
 800028a:	4618      	mov	r0, r3
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr
 8000294:	20000000 	.word	0x20000000
 8000298:	200000d0 	.word	0x200000d0

0800029c <isButtonPressed1s>:
int isButtonPressed1s(unsigned int index) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	if (index >= N0_OF_BUTTONS)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d901      	bls.n	80002ae <isButtonPressed1s+0x12>
		return 0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	e00e      	b.n	80002cc <isButtonPressed1s+0x30>
	if (isTimerExpired(3) && flagForButtonPress1s[index] == 1) {
 80002ae:	2003      	movs	r0, #3
 80002b0:	f000 ff96 	bl	80011e0 <isTimerExpired>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d007      	beq.n	80002ca <isButtonPressed1s+0x2e>
 80002ba:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <isButtonPressed1s+0x38>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4413      	add	r3, r2
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d101      	bne.n	80002ca <isButtonPressed1s+0x2e>
//		setTimer(3, 500);
//		SCH_Add_Task(t3, 50, 0);
		return 1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e000      	b.n	80002cc <isButtonPressed1s+0x30>
	}
	return 0;
 80002ca:	2300      	movs	r3, #0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200000d8 	.word	0x200000d8

080002d8 <initAutomatic>:

int stateA;
int stateB;
int countA;
int countB;
void initAutomatic() {
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	timeGreen = 3;
 80002dc:	4b0d      	ldr	r3, [pc, #52]	; (8000314 <initAutomatic+0x3c>)
 80002de:	2203      	movs	r2, #3
 80002e0:	601a      	str	r2, [r3, #0]
	timeAmber = 2;
 80002e2:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <initAutomatic+0x40>)
 80002e4:	2202      	movs	r2, #2
 80002e6:	601a      	str	r2, [r3, #0]
	timeRed = 5;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <initAutomatic+0x44>)
 80002ea:	2205      	movs	r2, #5
 80002ec:	601a      	str	r2, [r3, #0]
	stateA = RED;
 80002ee:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <initAutomatic+0x48>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
	countA = timeRed;
 80002f4:	4b09      	ldr	r3, [pc, #36]	; (800031c <initAutomatic+0x44>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <initAutomatic+0x4c>)
 80002fa:	6013      	str	r3, [r2, #0]
	stateB = GREEN;
 80002fc:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <initAutomatic+0x50>)
 80002fe:	2201      	movs	r2, #1
 8000300:	601a      	str	r2, [r3, #0]
	countB = timeGreen;
 8000302:	4b04      	ldr	r3, [pc, #16]	; (8000314 <initAutomatic+0x3c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a09      	ldr	r2, [pc, #36]	; (800032c <initAutomatic+0x54>)
 8000308:	6013      	str	r3, [r2, #0]
//	setTimer(0, 1000);
//	SCH_Add_Task(t0, 100, 0);
//	setTimer(1, 1000);
//	SCH_Add_Task(t1, 100, 0);
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	200000f0 	.word	0x200000f0
 8000318:	200000f8 	.word	0x200000f8
 800031c:	200000fc 	.word	0x200000fc
 8000320:	200000ec 	.word	0x200000ec
 8000324:	200000e8 	.word	0x200000e8
 8000328:	200000e4 	.word	0x200000e4
 800032c:	200000e0 	.word	0x200000e0

08000330 <afterModify>:
void afterModify(){
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	stateA = RED;
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <afterModify+0x28>)
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
	countA = timeRed;
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <afterModify+0x2c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <afterModify+0x30>)
 8000340:	6013      	str	r3, [r2, #0]
	stateB = GREEN;
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <afterModify+0x34>)
 8000344:	2201      	movs	r2, #1
 8000346:	601a      	str	r2, [r3, #0]
	countB = timeGreen;
 8000348:	4b07      	ldr	r3, [pc, #28]	; (8000368 <afterModify+0x38>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a07      	ldr	r2, [pc, #28]	; (800036c <afterModify+0x3c>)
 800034e:	6013      	str	r3, [r2, #0]
//	setTimer(0, 1000);
//	SCH_Add_Task(t0, 100, 0);
//	setTimer(1, 1000);
//	SCH_Add_Task(t1, 100, 0);
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	200000ec 	.word	0x200000ec
 800035c:	200000fc 	.word	0x200000fc
 8000360:	200000e8 	.word	0x200000e8
 8000364:	200000e4 	.word	0x200000e4
 8000368:	200000f0 	.word	0x200000f0
 800036c:	200000e0 	.word	0x200000e0

08000370 <automaticRun>:
void automaticRun() {
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	displayTime(countA, countB);
 8000374:	4b66      	ldr	r3, [pc, #408]	; (8000510 <automaticRun+0x1a0>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a66      	ldr	r2, [pc, #408]	; (8000514 <automaticRun+0x1a4>)
 800037a:	6812      	ldr	r2, [r2, #0]
 800037c:	4611      	mov	r1, r2
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fb66 	bl	8000a50 <displayTime>
	switch (stateA) {
 8000384:	4b64      	ldr	r3, [pc, #400]	; (8000518 <automaticRun+0x1a8>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b02      	cmp	r3, #2
 800038a:	d01e      	beq.n	80003ca <automaticRun+0x5a>
 800038c:	2b02      	cmp	r3, #2
 800038e:	dc4e      	bgt.n	800042e <automaticRun+0xbe>
 8000390:	2b00      	cmp	r3, #0
 8000392:	d033      	beq.n	80003fc <automaticRun+0x8c>
 8000394:	2b01      	cmp	r3, #1
 8000396:	d14a      	bne.n	800042e <automaticRun+0xbe>
		case GREEN:
				greenA();
 8000398:	f000 fc6c 	bl	8000c74 <greenA>
				if(isTimerExpired(0)){
 800039c:	2000      	movs	r0, #0
 800039e:	f000 ff1f 	bl	80011e0 <isTimerExpired>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d004      	beq.n	80003b2 <automaticRun+0x42>
//					setTimer(0, 1000);
//					SCH_Add_Task(t0, 100, 0);
					countA--;
 80003a8:	4b59      	ldr	r3, [pc, #356]	; (8000510 <automaticRun+0x1a0>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	3b01      	subs	r3, #1
 80003ae:	4a58      	ldr	r2, [pc, #352]	; (8000510 <automaticRun+0x1a0>)
 80003b0:	6013      	str	r3, [r2, #0]
				}
				if(countA <= 0){
 80003b2:	4b57      	ldr	r3, [pc, #348]	; (8000510 <automaticRun+0x1a0>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	dc41      	bgt.n	800043e <automaticRun+0xce>
					countA = timeAmber;
 80003ba:	4b58      	ldr	r3, [pc, #352]	; (800051c <automaticRun+0x1ac>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4a54      	ldr	r2, [pc, #336]	; (8000510 <automaticRun+0x1a0>)
 80003c0:	6013      	str	r3, [r2, #0]
					stateA = AMBER;
 80003c2:	4b55      	ldr	r3, [pc, #340]	; (8000518 <automaticRun+0x1a8>)
 80003c4:	2202      	movs	r2, #2
 80003c6:	601a      	str	r2, [r3, #0]
				}
			break;
 80003c8:	e039      	b.n	800043e <automaticRun+0xce>
		case AMBER:
				amberA();
 80003ca:	f000 fc6b 	bl	8000ca4 <amberA>
				if(isTimerExpired(0)){
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 ff06 	bl	80011e0 <isTimerExpired>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d004      	beq.n	80003e4 <automaticRun+0x74>
//					setTimer(0, 1000);
//					SCH_Add_Task(t0, 100, 0);
					countA--;
 80003da:	4b4d      	ldr	r3, [pc, #308]	; (8000510 <automaticRun+0x1a0>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	3b01      	subs	r3, #1
 80003e0:	4a4b      	ldr	r2, [pc, #300]	; (8000510 <automaticRun+0x1a0>)
 80003e2:	6013      	str	r3, [r2, #0]
				}
				if(countA <= 0){
 80003e4:	4b4a      	ldr	r3, [pc, #296]	; (8000510 <automaticRun+0x1a0>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	dc2a      	bgt.n	8000442 <automaticRun+0xd2>
					countA = timeRed;
 80003ec:	4b4c      	ldr	r3, [pc, #304]	; (8000520 <automaticRun+0x1b0>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a47      	ldr	r2, [pc, #284]	; (8000510 <automaticRun+0x1a0>)
 80003f2:	6013      	str	r3, [r2, #0]
					stateA = RED;
 80003f4:	4b48      	ldr	r3, [pc, #288]	; (8000518 <automaticRun+0x1a8>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
				}
			break;
 80003fa:	e022      	b.n	8000442 <automaticRun+0xd2>
		case RED:
				redA();
 80003fc:	f000 fc6a 	bl	8000cd4 <redA>
				if(isTimerExpired(0)){
 8000400:	2000      	movs	r0, #0
 8000402:	f000 feed 	bl	80011e0 <isTimerExpired>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d004      	beq.n	8000416 <automaticRun+0xa6>
//					setTimer(0, 1000);
//					SCH_Add_Task(t0, 100, 0);
					countA--;
 800040c:	4b40      	ldr	r3, [pc, #256]	; (8000510 <automaticRun+0x1a0>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	3b01      	subs	r3, #1
 8000412:	4a3f      	ldr	r2, [pc, #252]	; (8000510 <automaticRun+0x1a0>)
 8000414:	6013      	str	r3, [r2, #0]
				}
				if(countA <= 0){
 8000416:	4b3e      	ldr	r3, [pc, #248]	; (8000510 <automaticRun+0x1a0>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	dc13      	bgt.n	8000446 <automaticRun+0xd6>
					countA = timeGreen;
 800041e:	4b41      	ldr	r3, [pc, #260]	; (8000524 <automaticRun+0x1b4>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a3b      	ldr	r2, [pc, #236]	; (8000510 <automaticRun+0x1a0>)
 8000424:	6013      	str	r3, [r2, #0]
					stateA = GREEN;
 8000426:	4b3c      	ldr	r3, [pc, #240]	; (8000518 <automaticRun+0x1a8>)
 8000428:	2201      	movs	r2, #1
 800042a:	601a      	str	r2, [r3, #0]
				}
			break;
 800042c:	e00b      	b.n	8000446 <automaticRun+0xd6>
		default:
			stateA = RED;
 800042e:	4b3a      	ldr	r3, [pc, #232]	; (8000518 <automaticRun+0x1a8>)
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
			countA = timeRed;
 8000434:	4b3a      	ldr	r3, [pc, #232]	; (8000520 <automaticRun+0x1b0>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a35      	ldr	r2, [pc, #212]	; (8000510 <automaticRun+0x1a0>)
 800043a:	6013      	str	r3, [r2, #0]
//			setTimer(0, 1000);
//			SCH_Add_Task(t0, 100, 0);
			break;
 800043c:	e004      	b.n	8000448 <automaticRun+0xd8>
			break;
 800043e:	bf00      	nop
 8000440:	e002      	b.n	8000448 <automaticRun+0xd8>
			break;
 8000442:	bf00      	nop
 8000444:	e000      	b.n	8000448 <automaticRun+0xd8>
			break;
 8000446:	bf00      	nop
	}
	switch (stateB) {
 8000448:	4b37      	ldr	r3, [pc, #220]	; (8000528 <automaticRun+0x1b8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2b02      	cmp	r3, #2
 800044e:	d01e      	beq.n	800048e <automaticRun+0x11e>
 8000450:	2b02      	cmp	r3, #2
 8000452:	dc4e      	bgt.n	80004f2 <automaticRun+0x182>
 8000454:	2b00      	cmp	r3, #0
 8000456:	d033      	beq.n	80004c0 <automaticRun+0x150>
 8000458:	2b01      	cmp	r3, #1
 800045a:	d14a      	bne.n	80004f2 <automaticRun+0x182>
		case GREEN:
				greenB();
 800045c:	f000 fc52 	bl	8000d04 <greenB>
				if(isTimerExpired(1)){
 8000460:	2001      	movs	r0, #1
 8000462:	f000 febd 	bl	80011e0 <isTimerExpired>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d004      	beq.n	8000476 <automaticRun+0x106>
//					setTimer(1, 1000);
//					SCH_Add_Task(t1, 100, 0);
					countB--;
 800046c:	4b29      	ldr	r3, [pc, #164]	; (8000514 <automaticRun+0x1a4>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	3b01      	subs	r3, #1
 8000472:	4a28      	ldr	r2, [pc, #160]	; (8000514 <automaticRun+0x1a4>)
 8000474:	6013      	str	r3, [r2, #0]
				}
				if(countB <= 0){
 8000476:	4b27      	ldr	r3, [pc, #156]	; (8000514 <automaticRun+0x1a4>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	dc41      	bgt.n	8000502 <automaticRun+0x192>
					countB = timeAmber;
 800047e:	4b27      	ldr	r3, [pc, #156]	; (800051c <automaticRun+0x1ac>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a24      	ldr	r2, [pc, #144]	; (8000514 <automaticRun+0x1a4>)
 8000484:	6013      	str	r3, [r2, #0]
					stateB = AMBER;
 8000486:	4b28      	ldr	r3, [pc, #160]	; (8000528 <automaticRun+0x1b8>)
 8000488:	2202      	movs	r2, #2
 800048a:	601a      	str	r2, [r3, #0]
				}
			break;
 800048c:	e039      	b.n	8000502 <automaticRun+0x192>
		case AMBER:
				amberB();
 800048e:	f000 fc51 	bl	8000d34 <amberB>
				if(isTimerExpired(1)){
 8000492:	2001      	movs	r0, #1
 8000494:	f000 fea4 	bl	80011e0 <isTimerExpired>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d004      	beq.n	80004a8 <automaticRun+0x138>
//					setTimer(1, 1000);
//					SCH_Add_Task(t1, 100, 0);
					countB--;
 800049e:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <automaticRun+0x1a4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	4a1b      	ldr	r2, [pc, #108]	; (8000514 <automaticRun+0x1a4>)
 80004a6:	6013      	str	r3, [r2, #0]
				}
				if(countB <= 0){
 80004a8:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <automaticRun+0x1a4>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	dc2a      	bgt.n	8000506 <automaticRun+0x196>
					countB = timeRed;
 80004b0:	4b1b      	ldr	r3, [pc, #108]	; (8000520 <automaticRun+0x1b0>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a17      	ldr	r2, [pc, #92]	; (8000514 <automaticRun+0x1a4>)
 80004b6:	6013      	str	r3, [r2, #0]
					stateB = RED;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <automaticRun+0x1b8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
				}
			break;
 80004be:	e022      	b.n	8000506 <automaticRun+0x196>
		case RED:
				redB();
 80004c0:	f000 fc50 	bl	8000d64 <redB>
				if(isTimerExpired(1)){
 80004c4:	2001      	movs	r0, #1
 80004c6:	f000 fe8b 	bl	80011e0 <isTimerExpired>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d004      	beq.n	80004da <automaticRun+0x16a>
//					setTimer(1, 1000);
//					SCH_Add_Task(t1, 100, 0);
					countB--;
 80004d0:	4b10      	ldr	r3, [pc, #64]	; (8000514 <automaticRun+0x1a4>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	3b01      	subs	r3, #1
 80004d6:	4a0f      	ldr	r2, [pc, #60]	; (8000514 <automaticRun+0x1a4>)
 80004d8:	6013      	str	r3, [r2, #0]
				}
				if(countB <= 0){
 80004da:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <automaticRun+0x1a4>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	dc13      	bgt.n	800050a <automaticRun+0x19a>
					countB = timeGreen;
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <automaticRun+0x1b4>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <automaticRun+0x1a4>)
 80004e8:	6013      	str	r3, [r2, #0]
					stateB = GREEN;
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <automaticRun+0x1b8>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	601a      	str	r2, [r3, #0]
				}
			break;
 80004f0:	e00b      	b.n	800050a <automaticRun+0x19a>
		default:
			stateB = RED;
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <automaticRun+0x1b8>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
			countB = timeRed;
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <automaticRun+0x1b0>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a05      	ldr	r2, [pc, #20]	; (8000514 <automaticRun+0x1a4>)
 80004fe:	6013      	str	r3, [r2, #0]
//			setTimer(1, 1000);
//			SCH_Add_Task(t1, 100, 0);
			break;
 8000500:	e004      	b.n	800050c <automaticRun+0x19c>
			break;
 8000502:	bf00      	nop
 8000504:	e002      	b.n	800050c <automaticRun+0x19c>
			break;
 8000506:	bf00      	nop
 8000508:	e000      	b.n	800050c <automaticRun+0x19c>
			break;
 800050a:	bf00      	nop
	}
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200000e8 	.word	0x200000e8
 8000514:	200000e0 	.word	0x200000e0
 8000518:	200000ec 	.word	0x200000ec
 800051c:	200000f8 	.word	0x200000f8
 8000520:	200000fc 	.word	0x200000fc
 8000524:	200000f0 	.word	0x200000f0
 8000528:	200000e4 	.word	0x200000e4

0800052c <modifyGreen>:
 *      Author: Admin
 */

#include "fsmModify.h"

void modifyGreen(){
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	if(isTimerExpired(4)){
 8000530:	2004      	movs	r0, #4
 8000532:	f000 fe55 	bl	80011e0 <isTimerExpired>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <modifyGreen+0x14>
		greenBlinky();
 800053c:	f000 fc2a 	bl	8000d94 <greenBlinky>
//		setTimer(0, 500);
//		SCH_Add_Task(t0, 50, 0);
	}
	displayTime(4, timeTemp);
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <modifyGreen+0x90>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	2004      	movs	r0, #4
 8000548:	f000 fa82 	bl	8000a50 <displayTime>
	if(isButtonPressed1s(1)) {
 800054c:	2001      	movs	r0, #1
 800054e:	f7ff fea5 	bl	800029c <isButtonPressed1s>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d00b      	beq.n	8000570 <modifyGreen+0x44>
		timeTemp = (timeTemp + 1) % timeRed;
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <modifyGreen+0x90>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <modifyGreen+0x94>)
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	fb93 f1f2 	sdiv	r1, r3, r2
 8000566:	fb02 f201 	mul.w	r2, r2, r1
 800056a:	1a9b      	subs	r3, r3, r2
 800056c:	4a13      	ldr	r2, [pc, #76]	; (80005bc <modifyGreen+0x90>)
 800056e:	6013      	str	r3, [r2, #0]
//		setTimer(3, 500);
//		SCH_Add_Task(t3, 50, 0);
	}
	if(isButtonPressed(1)) timeTemp = (timeTemp + 1) % timeRed;
 8000570:	2001      	movs	r0, #1
 8000572:	f7ff fe6d 	bl	8000250 <isButtonPressed>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00b      	beq.n	8000594 <modifyGreen+0x68>
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <modifyGreen+0x90>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <modifyGreen+0x94>)
 8000584:	6812      	ldr	r2, [r2, #0]
 8000586:	fb93 f1f2 	sdiv	r1, r3, r2
 800058a:	fb02 f201 	mul.w	r2, r2, r1
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <modifyGreen+0x90>)
 8000592:	6013      	str	r3, [r2, #0]
	if(isButtonPressed(2)) {
 8000594:	2002      	movs	r0, #2
 8000596:	f7ff fe5b 	bl	8000250 <isButtonPressed>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00a      	beq.n	80005b6 <modifyGreen+0x8a>
		timeGreen = timeTemp;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <modifyGreen+0x90>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <modifyGreen+0x98>)
 80005a6:	6013      	str	r3, [r2, #0]
		timeAmber = timeRed - timeGreen;
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <modifyGreen+0x94>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <modifyGreen+0x98>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <modifyGreen+0x9c>)
 80005b4:	6013      	str	r3, [r2, #0]
	}
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000f4 	.word	0x200000f4
 80005c0:	200000fc 	.word	0x200000fc
 80005c4:	200000f0 	.word	0x200000f0
 80005c8:	200000f8 	.word	0x200000f8

080005cc <modifyAmber>:
void modifyAmber(){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	if(isTimerExpired(4)){
 80005d0:	2004      	movs	r0, #4
 80005d2:	f000 fe05 	bl	80011e0 <isTimerExpired>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <modifyAmber+0x14>
		amberBlinky();
 80005dc:	f000 fc02 	bl	8000de4 <amberBlinky>
//		setTimer(0, 500);
//		SCH_Add_Task(t0, 50, 0);
	}
	displayTime(3, timeTemp);
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <modifyAmber+0x90>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	2003      	movs	r0, #3
 80005e8:	f000 fa32 	bl	8000a50 <displayTime>
	if(isButtonPressed1s(1)) {
 80005ec:	2001      	movs	r0, #1
 80005ee:	f7ff fe55 	bl	800029c <isButtonPressed1s>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00b      	beq.n	8000610 <modifyAmber+0x44>
		timeTemp = (timeTemp + 1) % timeRed;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <modifyAmber+0x90>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <modifyAmber+0x94>)
 8000600:	6812      	ldr	r2, [r2, #0]
 8000602:	fb93 f1f2 	sdiv	r1, r3, r2
 8000606:	fb02 f201 	mul.w	r2, r2, r1
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <modifyAmber+0x90>)
 800060e:	6013      	str	r3, [r2, #0]
//		setTimer(3, 500);
//		SCH_Add_Task(t3, 50, 0);
	}
	if(isButtonPressed(1)) timeTemp = (timeTemp + 1) % timeRed;
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff fe1d 	bl	8000250 <isButtonPressed>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00b      	beq.n	8000634 <modifyAmber+0x68>
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <modifyAmber+0x90>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <modifyAmber+0x94>)
 8000624:	6812      	ldr	r2, [r2, #0]
 8000626:	fb93 f1f2 	sdiv	r1, r3, r2
 800062a:	fb02 f201 	mul.w	r2, r2, r1
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	4a0a      	ldr	r2, [pc, #40]	; (800065c <modifyAmber+0x90>)
 8000632:	6013      	str	r3, [r2, #0]
	if(isButtonPressed(2)) {
 8000634:	2002      	movs	r0, #2
 8000636:	f7ff fe0b 	bl	8000250 <isButtonPressed>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d00a      	beq.n	8000656 <modifyAmber+0x8a>
		timeAmber = timeTemp;
 8000640:	4b06      	ldr	r3, [pc, #24]	; (800065c <modifyAmber+0x90>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a07      	ldr	r2, [pc, #28]	; (8000664 <modifyAmber+0x98>)
 8000646:	6013      	str	r3, [r2, #0]
		timeGreen = timeRed - timeAmber;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <modifyAmber+0x94>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <modifyAmber+0x98>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <modifyAmber+0x9c>)
 8000654:	6013      	str	r3, [r2, #0]
	}
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200000f4 	.word	0x200000f4
 8000660:	200000fc 	.word	0x200000fc
 8000664:	200000f8 	.word	0x200000f8
 8000668:	200000f0 	.word	0x200000f0

0800066c <modifyRed>:
void modifyRed(){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	if(isTimerExpired(4)){
 8000670:	2004      	movs	r0, #4
 8000672:	f000 fdb5 	bl	80011e0 <isTimerExpired>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <modifyRed+0x14>
		redBlinky();
 800067c:	f000 fbda 	bl	8000e34 <redBlinky>
//		setTimer(0, 500);
//		SCH_Add_Task(t0, 50, 0);
	}
	displayTime(2, timeTemp);
 8000680:	4b26      	ldr	r3, [pc, #152]	; (800071c <modifyRed+0xb0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	2002      	movs	r0, #2
 8000688:	f000 f9e2 	bl	8000a50 <displayTime>
	if(isButtonPressed1s(1)) {
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff fe05 	bl	800029c <isButtonPressed1s>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d00e      	beq.n	80006b6 <modifyRed+0x4a>
		timeTemp = (timeTemp + 1) % 100;
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <modifyRed+0xb0>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	1c5a      	adds	r2, r3, #1
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <modifyRed+0xb4>)
 80006a0:	fb83 1302 	smull	r1, r3, r3, r2
 80006a4:	1159      	asrs	r1, r3, #5
 80006a6:	17d3      	asrs	r3, r2, #31
 80006a8:	1acb      	subs	r3, r1, r3
 80006aa:	2164      	movs	r1, #100	; 0x64
 80006ac:	fb01 f303 	mul.w	r3, r1, r3
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	4a1a      	ldr	r2, [pc, #104]	; (800071c <modifyRed+0xb0>)
 80006b4:	6013      	str	r3, [r2, #0]
//		setTimer(3, 500);
//		SCH_Add_Task(t3, 50, 0);
	}
	if(isButtonPressed(1)) timeTemp = (timeTemp + 1) % 100;
 80006b6:	2001      	movs	r0, #1
 80006b8:	f7ff fdca 	bl	8000250 <isButtonPressed>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d00e      	beq.n	80006e0 <modifyRed+0x74>
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <modifyRed+0xb0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <modifyRed+0xb4>)
 80006ca:	fb83 1302 	smull	r1, r3, r3, r2
 80006ce:	1159      	asrs	r1, r3, #5
 80006d0:	17d3      	asrs	r3, r2, #31
 80006d2:	1acb      	subs	r3, r1, r3
 80006d4:	2164      	movs	r1, #100	; 0x64
 80006d6:	fb01 f303 	mul.w	r3, r1, r3
 80006da:	1ad3      	subs	r3, r2, r3
 80006dc:	4a0f      	ldr	r2, [pc, #60]	; (800071c <modifyRed+0xb0>)
 80006de:	6013      	str	r3, [r2, #0]
	if(isButtonPressed(2)) {
 80006e0:	2002      	movs	r0, #2
 80006e2:	f7ff fdb5 	bl	8000250 <isButtonPressed>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d015      	beq.n	8000718 <modifyRed+0xac>
		timeRed = timeTemp;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <modifyRed+0xb0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <modifyRed+0xb8>)
 80006f2:	6013      	str	r3, [r2, #0]
		timeGreen = timeGreen % timeRed;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <modifyRed+0xbc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <modifyRed+0xb8>)
 80006fa:	6812      	ldr	r2, [r2, #0]
 80006fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8000700:	fb02 f201 	mul.w	r2, r2, r1
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <modifyRed+0xbc>)
 8000708:	6013      	str	r3, [r2, #0]
		timeAmber = timeRed - timeGreen;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <modifyRed+0xb8>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <modifyRed+0xbc>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	4a05      	ldr	r2, [pc, #20]	; (800072c <modifyRed+0xc0>)
 8000716:	6013      	str	r3, [r2, #0]
	}
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000f4 	.word	0x200000f4
 8000720:	51eb851f 	.word	0x51eb851f
 8000724:	200000fc 	.word	0x200000fc
 8000728:	200000f0 	.word	0x200000f0
 800072c:	200000f8 	.word	0x200000f8

08000730 <display7SEG>:
#ifndef SRC_LEDTRAFFIC_C_
#define SRC_LEDTRAFFIC_C_

#include "ledTraffic.h"

void display7SEG(int num){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b09      	cmp	r3, #9
 800073c:	f200 8180 	bhi.w	8000a40 <display7SEG+0x310>
 8000740:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <display7SEG+0x18>)
 8000742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000746:	bf00      	nop
 8000748:	08000771 	.word	0x08000771
 800074c:	080007b9 	.word	0x080007b9
 8000750:	08000801 	.word	0x08000801
 8000754:	08000849 	.word	0x08000849
 8000758:	08000891 	.word	0x08000891
 800075c:	080008d9 	.word	0x080008d9
 8000760:	08000921 	.word	0x08000921
 8000764:	08000969 	.word	0x08000969
 8000768:	080009b1 	.word	0x080009b1
 800076c:	080009f9 	.word	0x080009f9
	switch(num){
	case 0:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 8000770:	2200      	movs	r2, #0
 8000772:	2101      	movs	r1, #1
 8000774:	48b5      	ldr	r0, [pc, #724]	; (8000a4c <display7SEG+0x31c>)
 8000776:	f001 fa5e 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 800077a:	2200      	movs	r2, #0
 800077c:	2102      	movs	r1, #2
 800077e:	48b3      	ldr	r0, [pc, #716]	; (8000a4c <display7SEG+0x31c>)
 8000780:	f001 fa59 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 8000784:	2200      	movs	r2, #0
 8000786:	2104      	movs	r1, #4
 8000788:	48b0      	ldr	r0, [pc, #704]	; (8000a4c <display7SEG+0x31c>)
 800078a:	f001 fa54 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 800078e:	2200      	movs	r2, #0
 8000790:	2108      	movs	r1, #8
 8000792:	48ae      	ldr	r0, [pc, #696]	; (8000a4c <display7SEG+0x31c>)
 8000794:	f001 fa4f 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_RESET );
 8000798:	2200      	movs	r2, #0
 800079a:	2110      	movs	r1, #16
 800079c:	48ab      	ldr	r0, [pc, #684]	; (8000a4c <display7SEG+0x31c>)
 800079e:	f001 fa4a 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 80007a2:	2200      	movs	r2, #0
 80007a4:	2120      	movs	r1, #32
 80007a6:	48a9      	ldr	r0, [pc, #676]	; (8000a4c <display7SEG+0x31c>)
 80007a8:	f001 fa45 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_SET );
 80007ac:	2201      	movs	r2, #1
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	48a6      	ldr	r0, [pc, #664]	; (8000a4c <display7SEG+0x31c>)
 80007b2:	f001 fa40 	bl	8001c36 <HAL_GPIO_WritePin>
		break;
 80007b6:	e144      	b.n	8000a42 <display7SEG+0x312>
	case 1:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_SET );
 80007b8:	2201      	movs	r2, #1
 80007ba:	2101      	movs	r1, #1
 80007bc:	48a3      	ldr	r0, [pc, #652]	; (8000a4c <display7SEG+0x31c>)
 80007be:	f001 fa3a 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 80007c2:	2200      	movs	r2, #0
 80007c4:	2102      	movs	r1, #2
 80007c6:	48a1      	ldr	r0, [pc, #644]	; (8000a4c <display7SEG+0x31c>)
 80007c8:	f001 fa35 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 80007cc:	2200      	movs	r2, #0
 80007ce:	2104      	movs	r1, #4
 80007d0:	489e      	ldr	r0, [pc, #632]	; (8000a4c <display7SEG+0x31c>)
 80007d2:	f001 fa30 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_SET );
 80007d6:	2201      	movs	r2, #1
 80007d8:	2108      	movs	r1, #8
 80007da:	489c      	ldr	r0, [pc, #624]	; (8000a4c <display7SEG+0x31c>)
 80007dc:	f001 fa2b 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 80007e0:	2201      	movs	r2, #1
 80007e2:	2110      	movs	r1, #16
 80007e4:	4899      	ldr	r0, [pc, #612]	; (8000a4c <display7SEG+0x31c>)
 80007e6:	f001 fa26 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_SET );
 80007ea:	2201      	movs	r2, #1
 80007ec:	2120      	movs	r1, #32
 80007ee:	4897      	ldr	r0, [pc, #604]	; (8000a4c <display7SEG+0x31c>)
 80007f0:	f001 fa21 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_SET );
 80007f4:	2201      	movs	r2, #1
 80007f6:	2140      	movs	r1, #64	; 0x40
 80007f8:	4894      	ldr	r0, [pc, #592]	; (8000a4c <display7SEG+0x31c>)
 80007fa:	f001 fa1c 	bl	8001c36 <HAL_GPIO_WritePin>
		break;
 80007fe:	e120      	b.n	8000a42 <display7SEG+0x312>
	case 2:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 8000800:	2200      	movs	r2, #0
 8000802:	2101      	movs	r1, #1
 8000804:	4891      	ldr	r0, [pc, #580]	; (8000a4c <display7SEG+0x31c>)
 8000806:	f001 fa16 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 800080a:	2200      	movs	r2, #0
 800080c:	2102      	movs	r1, #2
 800080e:	488f      	ldr	r0, [pc, #572]	; (8000a4c <display7SEG+0x31c>)
 8000810:	f001 fa11 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_SET );
 8000814:	2201      	movs	r2, #1
 8000816:	2104      	movs	r1, #4
 8000818:	488c      	ldr	r0, [pc, #560]	; (8000a4c <display7SEG+0x31c>)
 800081a:	f001 fa0c 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 800081e:	2200      	movs	r2, #0
 8000820:	2108      	movs	r1, #8
 8000822:	488a      	ldr	r0, [pc, #552]	; (8000a4c <display7SEG+0x31c>)
 8000824:	f001 fa07 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_RESET );
 8000828:	2200      	movs	r2, #0
 800082a:	2110      	movs	r1, #16
 800082c:	4887      	ldr	r0, [pc, #540]	; (8000a4c <display7SEG+0x31c>)
 800082e:	f001 fa02 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_SET );
 8000832:	2201      	movs	r2, #1
 8000834:	2120      	movs	r1, #32
 8000836:	4885      	ldr	r0, [pc, #532]	; (8000a4c <display7SEG+0x31c>)
 8000838:	f001 f9fd 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 800083c:	2200      	movs	r2, #0
 800083e:	2140      	movs	r1, #64	; 0x40
 8000840:	4882      	ldr	r0, [pc, #520]	; (8000a4c <display7SEG+0x31c>)
 8000842:	f001 f9f8 	bl	8001c36 <HAL_GPIO_WritePin>
		break;
 8000846:	e0fc      	b.n	8000a42 <display7SEG+0x312>
	case 3:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 8000848:	2200      	movs	r2, #0
 800084a:	2101      	movs	r1, #1
 800084c:	487f      	ldr	r0, [pc, #508]	; (8000a4c <display7SEG+0x31c>)
 800084e:	f001 f9f2 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 8000852:	2200      	movs	r2, #0
 8000854:	2102      	movs	r1, #2
 8000856:	487d      	ldr	r0, [pc, #500]	; (8000a4c <display7SEG+0x31c>)
 8000858:	f001 f9ed 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 800085c:	2200      	movs	r2, #0
 800085e:	2104      	movs	r1, #4
 8000860:	487a      	ldr	r0, [pc, #488]	; (8000a4c <display7SEG+0x31c>)
 8000862:	f001 f9e8 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	4878      	ldr	r0, [pc, #480]	; (8000a4c <display7SEG+0x31c>)
 800086c:	f001 f9e3 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 8000870:	2201      	movs	r2, #1
 8000872:	2110      	movs	r1, #16
 8000874:	4875      	ldr	r0, [pc, #468]	; (8000a4c <display7SEG+0x31c>)
 8000876:	f001 f9de 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_SET );
 800087a:	2201      	movs	r2, #1
 800087c:	2120      	movs	r1, #32
 800087e:	4873      	ldr	r0, [pc, #460]	; (8000a4c <display7SEG+0x31c>)
 8000880:	f001 f9d9 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 8000884:	2200      	movs	r2, #0
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	4870      	ldr	r0, [pc, #448]	; (8000a4c <display7SEG+0x31c>)
 800088a:	f001 f9d4 	bl	8001c36 <HAL_GPIO_WritePin>
		break;
 800088e:	e0d8      	b.n	8000a42 <display7SEG+0x312>
	case 4:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_SET );
 8000890:	2201      	movs	r2, #1
 8000892:	2101      	movs	r1, #1
 8000894:	486d      	ldr	r0, [pc, #436]	; (8000a4c <display7SEG+0x31c>)
 8000896:	f001 f9ce 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 800089a:	2200      	movs	r2, #0
 800089c:	2102      	movs	r1, #2
 800089e:	486b      	ldr	r0, [pc, #428]	; (8000a4c <display7SEG+0x31c>)
 80008a0:	f001 f9c9 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 80008a4:	2200      	movs	r2, #0
 80008a6:	2104      	movs	r1, #4
 80008a8:	4868      	ldr	r0, [pc, #416]	; (8000a4c <display7SEG+0x31c>)
 80008aa:	f001 f9c4 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_SET );
 80008ae:	2201      	movs	r2, #1
 80008b0:	2108      	movs	r1, #8
 80008b2:	4866      	ldr	r0, [pc, #408]	; (8000a4c <display7SEG+0x31c>)
 80008b4:	f001 f9bf 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 80008b8:	2201      	movs	r2, #1
 80008ba:	2110      	movs	r1, #16
 80008bc:	4863      	ldr	r0, [pc, #396]	; (8000a4c <display7SEG+0x31c>)
 80008be:	f001 f9ba 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 80008c2:	2200      	movs	r2, #0
 80008c4:	2120      	movs	r1, #32
 80008c6:	4861      	ldr	r0, [pc, #388]	; (8000a4c <display7SEG+0x31c>)
 80008c8:	f001 f9b5 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 80008cc:	2200      	movs	r2, #0
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	485e      	ldr	r0, [pc, #376]	; (8000a4c <display7SEG+0x31c>)
 80008d2:	f001 f9b0 	bl	8001c36 <HAL_GPIO_WritePin>
		break;
 80008d6:	e0b4      	b.n	8000a42 <display7SEG+0x312>
	case 5:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 80008d8:	2200      	movs	r2, #0
 80008da:	2101      	movs	r1, #1
 80008dc:	485b      	ldr	r0, [pc, #364]	; (8000a4c <display7SEG+0x31c>)
 80008de:	f001 f9aa 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_SET );
 80008e2:	2201      	movs	r2, #1
 80008e4:	2102      	movs	r1, #2
 80008e6:	4859      	ldr	r0, [pc, #356]	; (8000a4c <display7SEG+0x31c>)
 80008e8:	f001 f9a5 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 80008ec:	2200      	movs	r2, #0
 80008ee:	2104      	movs	r1, #4
 80008f0:	4856      	ldr	r0, [pc, #344]	; (8000a4c <display7SEG+0x31c>)
 80008f2:	f001 f9a0 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 80008f6:	2200      	movs	r2, #0
 80008f8:	2108      	movs	r1, #8
 80008fa:	4854      	ldr	r0, [pc, #336]	; (8000a4c <display7SEG+0x31c>)
 80008fc:	f001 f99b 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 8000900:	2201      	movs	r2, #1
 8000902:	2110      	movs	r1, #16
 8000904:	4851      	ldr	r0, [pc, #324]	; (8000a4c <display7SEG+0x31c>)
 8000906:	f001 f996 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 800090a:	2200      	movs	r2, #0
 800090c:	2120      	movs	r1, #32
 800090e:	484f      	ldr	r0, [pc, #316]	; (8000a4c <display7SEG+0x31c>)
 8000910:	f001 f991 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 8000914:	2200      	movs	r2, #0
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	484c      	ldr	r0, [pc, #304]	; (8000a4c <display7SEG+0x31c>)
 800091a:	f001 f98c 	bl	8001c36 <HAL_GPIO_WritePin>
		break;
 800091e:	e090      	b.n	8000a42 <display7SEG+0x312>
	case 6:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 8000920:	2200      	movs	r2, #0
 8000922:	2101      	movs	r1, #1
 8000924:	4849      	ldr	r0, [pc, #292]	; (8000a4c <display7SEG+0x31c>)
 8000926:	f001 f986 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_SET );
 800092a:	2201      	movs	r2, #1
 800092c:	2102      	movs	r1, #2
 800092e:	4847      	ldr	r0, [pc, #284]	; (8000a4c <display7SEG+0x31c>)
 8000930:	f001 f981 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 8000934:	2200      	movs	r2, #0
 8000936:	2104      	movs	r1, #4
 8000938:	4844      	ldr	r0, [pc, #272]	; (8000a4c <display7SEG+0x31c>)
 800093a:	f001 f97c 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 800093e:	2200      	movs	r2, #0
 8000940:	2108      	movs	r1, #8
 8000942:	4842      	ldr	r0, [pc, #264]	; (8000a4c <display7SEG+0x31c>)
 8000944:	f001 f977 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_RESET );
 8000948:	2200      	movs	r2, #0
 800094a:	2110      	movs	r1, #16
 800094c:	483f      	ldr	r0, [pc, #252]	; (8000a4c <display7SEG+0x31c>)
 800094e:	f001 f972 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 8000952:	2200      	movs	r2, #0
 8000954:	2120      	movs	r1, #32
 8000956:	483d      	ldr	r0, [pc, #244]	; (8000a4c <display7SEG+0x31c>)
 8000958:	f001 f96d 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 800095c:	2200      	movs	r2, #0
 800095e:	2140      	movs	r1, #64	; 0x40
 8000960:	483a      	ldr	r0, [pc, #232]	; (8000a4c <display7SEG+0x31c>)
 8000962:	f001 f968 	bl	8001c36 <HAL_GPIO_WritePin>
		break;
 8000966:	e06c      	b.n	8000a42 <display7SEG+0x312>
	case 7:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 8000968:	2200      	movs	r2, #0
 800096a:	2101      	movs	r1, #1
 800096c:	4837      	ldr	r0, [pc, #220]	; (8000a4c <display7SEG+0x31c>)
 800096e:	f001 f962 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 8000972:	2200      	movs	r2, #0
 8000974:	2102      	movs	r1, #2
 8000976:	4835      	ldr	r0, [pc, #212]	; (8000a4c <display7SEG+0x31c>)
 8000978:	f001 f95d 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 800097c:	2200      	movs	r2, #0
 800097e:	2104      	movs	r1, #4
 8000980:	4832      	ldr	r0, [pc, #200]	; (8000a4c <display7SEG+0x31c>)
 8000982:	f001 f958 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_SET );
 8000986:	2201      	movs	r2, #1
 8000988:	2108      	movs	r1, #8
 800098a:	4830      	ldr	r0, [pc, #192]	; (8000a4c <display7SEG+0x31c>)
 800098c:	f001 f953 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 8000990:	2201      	movs	r2, #1
 8000992:	2110      	movs	r1, #16
 8000994:	482d      	ldr	r0, [pc, #180]	; (8000a4c <display7SEG+0x31c>)
 8000996:	f001 f94e 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_SET );
 800099a:	2201      	movs	r2, #1
 800099c:	2120      	movs	r1, #32
 800099e:	482b      	ldr	r0, [pc, #172]	; (8000a4c <display7SEG+0x31c>)
 80009a0:	f001 f949 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_SET );
 80009a4:	2201      	movs	r2, #1
 80009a6:	2140      	movs	r1, #64	; 0x40
 80009a8:	4828      	ldr	r0, [pc, #160]	; (8000a4c <display7SEG+0x31c>)
 80009aa:	f001 f944 	bl	8001c36 <HAL_GPIO_WritePin>
		break;
 80009ae:	e048      	b.n	8000a42 <display7SEG+0x312>
	case 8:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 80009b0:	2200      	movs	r2, #0
 80009b2:	2101      	movs	r1, #1
 80009b4:	4825      	ldr	r0, [pc, #148]	; (8000a4c <display7SEG+0x31c>)
 80009b6:	f001 f93e 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 80009ba:	2200      	movs	r2, #0
 80009bc:	2102      	movs	r1, #2
 80009be:	4823      	ldr	r0, [pc, #140]	; (8000a4c <display7SEG+0x31c>)
 80009c0:	f001 f939 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 80009c4:	2200      	movs	r2, #0
 80009c6:	2104      	movs	r1, #4
 80009c8:	4820      	ldr	r0, [pc, #128]	; (8000a4c <display7SEG+0x31c>)
 80009ca:	f001 f934 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 80009ce:	2200      	movs	r2, #0
 80009d0:	2108      	movs	r1, #8
 80009d2:	481e      	ldr	r0, [pc, #120]	; (8000a4c <display7SEG+0x31c>)
 80009d4:	f001 f92f 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_RESET );
 80009d8:	2200      	movs	r2, #0
 80009da:	2110      	movs	r1, #16
 80009dc:	481b      	ldr	r0, [pc, #108]	; (8000a4c <display7SEG+0x31c>)
 80009de:	f001 f92a 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 80009e2:	2200      	movs	r2, #0
 80009e4:	2120      	movs	r1, #32
 80009e6:	4819      	ldr	r0, [pc, #100]	; (8000a4c <display7SEG+0x31c>)
 80009e8:	f001 f925 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 80009ec:	2200      	movs	r2, #0
 80009ee:	2140      	movs	r1, #64	; 0x40
 80009f0:	4816      	ldr	r0, [pc, #88]	; (8000a4c <display7SEG+0x31c>)
 80009f2:	f001 f920 	bl	8001c36 <HAL_GPIO_WritePin>
		break;
 80009f6:	e024      	b.n	8000a42 <display7SEG+0x312>
	case 9:
		HAL_GPIO_WritePin ( SEG0_GPIO_Port , SEG0_Pin , GPIO_PIN_RESET );
 80009f8:	2200      	movs	r2, #0
 80009fa:	2101      	movs	r1, #1
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <display7SEG+0x31c>)
 80009fe:	f001 f91a 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG1_GPIO_Port , SEG1_Pin , GPIO_PIN_RESET );
 8000a02:	2200      	movs	r2, #0
 8000a04:	2102      	movs	r1, #2
 8000a06:	4811      	ldr	r0, [pc, #68]	; (8000a4c <display7SEG+0x31c>)
 8000a08:	f001 f915 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG2_GPIO_Port , SEG2_Pin , GPIO_PIN_RESET );
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2104      	movs	r1, #4
 8000a10:	480e      	ldr	r0, [pc, #56]	; (8000a4c <display7SEG+0x31c>)
 8000a12:	f001 f910 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG3_GPIO_Port , SEG3_Pin , GPIO_PIN_RESET );
 8000a16:	2200      	movs	r2, #0
 8000a18:	2108      	movs	r1, #8
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <display7SEG+0x31c>)
 8000a1c:	f001 f90b 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG4_GPIO_Port , SEG4_Pin , GPIO_PIN_SET );
 8000a20:	2201      	movs	r2, #1
 8000a22:	2110      	movs	r1, #16
 8000a24:	4809      	ldr	r0, [pc, #36]	; (8000a4c <display7SEG+0x31c>)
 8000a26:	f001 f906 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG5_GPIO_Port , SEG5_Pin , GPIO_PIN_RESET );
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	4807      	ldr	r0, [pc, #28]	; (8000a4c <display7SEG+0x31c>)
 8000a30:	f001 f901 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( SEG6_GPIO_Port , SEG6_Pin , GPIO_PIN_RESET );
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	; 0x40
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <display7SEG+0x31c>)
 8000a3a:	f001 f8fc 	bl	8001c36 <HAL_GPIO_WritePin>
		break;
 8000a3e:	e000      	b.n	8000a42 <display7SEG+0x312>
	default:
		break;
 8000a40:	bf00      	nop
	}
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40010c00 	.word	0x40010c00

08000a50 <displayTime>:
int LED = 0;
void displayTime(int trafficA, int trafficB){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
	switch(LED){
 8000a5a:	4b83      	ldr	r3, [pc, #524]	; (8000c68 <displayTime+0x218>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	f200 80c8 	bhi.w	8000bf4 <displayTime+0x1a4>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <displayTime+0x1c>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a7d 	.word	0x08000a7d
 8000a70:	08000ad7 	.word	0x08000ad7
 8000a74:	08000b3b 	.word	0x08000b3b
 8000a78:	08000b93 	.word	0x08000b93
	case 0:
		display7SEG(trafficA / 10);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a7b      	ldr	r2, [pc, #492]	; (8000c6c <displayTime+0x21c>)
 8000a80:	fb82 1203 	smull	r1, r2, r2, r3
 8000a84:	1092      	asrs	r2, r2, #2
 8000a86:	17db      	asrs	r3, r3, #31
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fe50 	bl	8000730 <display7SEG>
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_RESET );
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a96:	4876      	ldr	r0, [pc, #472]	; (8000c70 <displayTime+0x220>)
 8000a98:	f001 f8cd 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET );
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa2:	4873      	ldr	r0, [pc, #460]	; (8000c70 <displayTime+0x220>)
 8000aa4:	f001 f8c7 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET );
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aae:	4870      	ldr	r0, [pc, #448]	; (8000c70 <displayTime+0x220>)
 8000ab0:	f001 f8c1 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET );
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aba:	486d      	ldr	r0, [pc, #436]	; (8000c70 <displayTime+0x220>)
 8000abc:	f001 f8bb 	bl	8001c36 <HAL_GPIO_WritePin>
		if(isTimerExpired(2)){
 8000ac0:	2002      	movs	r0, #2
 8000ac2:	f000 fb8d 	bl	80011e0 <isTimerExpired>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f000 80bf 	beq.w	8000c4c <displayTime+0x1fc>
			LED = 1;
 8000ace:	4b66      	ldr	r3, [pc, #408]	; (8000c68 <displayTime+0x218>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
//			setTimer(2, TIMEDISPLAY);
//			SCH_Add_Task(t2, 25, 0);
		}
		break;
 8000ad4:	e0ba      	b.n	8000c4c <displayTime+0x1fc>
	case 1:
		display7SEG(trafficA % 10);
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	4b64      	ldr	r3, [pc, #400]	; (8000c6c <displayTime+0x21c>)
 8000ada:	fb83 1302 	smull	r1, r3, r3, r2
 8000ade:	1099      	asrs	r1, r3, #2
 8000ae0:	17d3      	asrs	r3, r2, #31
 8000ae2:	1ac9      	subs	r1, r1, r3
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	440b      	add	r3, r1
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	1ad1      	subs	r1, r2, r3
 8000aee:	4608      	mov	r0, r1
 8000af0:	f7ff fe1e 	bl	8000730 <display7SEG>
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET );
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000afa:	485d      	ldr	r0, [pc, #372]	; (8000c70 <displayTime+0x220>)
 8000afc:	f001 f89b 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_RESET );
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b06:	485a      	ldr	r0, [pc, #360]	; (8000c70 <displayTime+0x220>)
 8000b08:	f001 f895 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET );
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b12:	4857      	ldr	r0, [pc, #348]	; (8000c70 <displayTime+0x220>)
 8000b14:	f001 f88f 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET );
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1e:	4854      	ldr	r0, [pc, #336]	; (8000c70 <displayTime+0x220>)
 8000b20:	f001 f889 	bl	8001c36 <HAL_GPIO_WritePin>
		if(isTimerExpired(2)){
 8000b24:	2002      	movs	r0, #2
 8000b26:	f000 fb5b 	bl	80011e0 <isTimerExpired>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	f000 808f 	beq.w	8000c50 <displayTime+0x200>
			LED = 2;
 8000b32:	4b4d      	ldr	r3, [pc, #308]	; (8000c68 <displayTime+0x218>)
 8000b34:	2202      	movs	r2, #2
 8000b36:	601a      	str	r2, [r3, #0]
//			setTimer(2, TIMEDISPLAY);
//			SCH_Add_Task(t2, 25, 0);
		}
		break;
 8000b38:	e08a      	b.n	8000c50 <displayTime+0x200>
	case 2:
		display7SEG(trafficB / 10);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	4a4b      	ldr	r2, [pc, #300]	; (8000c6c <displayTime+0x21c>)
 8000b3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b42:	1092      	asrs	r2, r2, #2
 8000b44:	17db      	asrs	r3, r3, #31
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fdf1 	bl	8000730 <display7SEG>
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET );
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b54:	4846      	ldr	r0, [pc, #280]	; (8000c70 <displayTime+0x220>)
 8000b56:	f001 f86e 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET );
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b60:	4843      	ldr	r0, [pc, #268]	; (8000c70 <displayTime+0x220>)
 8000b62:	f001 f868 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_RESET );
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6c:	4840      	ldr	r0, [pc, #256]	; (8000c70 <displayTime+0x220>)
 8000b6e:	f001 f862 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET );
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b78:	483d      	ldr	r0, [pc, #244]	; (8000c70 <displayTime+0x220>)
 8000b7a:	f001 f85c 	bl	8001c36 <HAL_GPIO_WritePin>
		if(isTimerExpired(2)){
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f000 fb2e 	bl	80011e0 <isTimerExpired>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d064      	beq.n	8000c54 <displayTime+0x204>
			LED = 3;
 8000b8a:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <displayTime+0x218>)
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	601a      	str	r2, [r3, #0]
//			setTimer(2, TIMEDISPLAY);
//			SCH_Add_Task(t2, 25, 0);
		}

		break;
 8000b90:	e060      	b.n	8000c54 <displayTime+0x204>
	case 3:
		display7SEG(trafficB % 10);
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	4b35      	ldr	r3, [pc, #212]	; (8000c6c <displayTime+0x21c>)
 8000b96:	fb83 1302 	smull	r1, r3, r3, r2
 8000b9a:	1099      	asrs	r1, r3, #2
 8000b9c:	17d3      	asrs	r3, r2, #31
 8000b9e:	1ac9      	subs	r1, r1, r3
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	1ad1      	subs	r1, r2, r3
 8000baa:	4608      	mov	r0, r1
 8000bac:	f7ff fdc0 	bl	8000730 <display7SEG>
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET );
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb6:	482e      	ldr	r0, [pc, #184]	; (8000c70 <displayTime+0x220>)
 8000bb8:	f001 f83d 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET );
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc2:	482b      	ldr	r0, [pc, #172]	; (8000c70 <displayTime+0x220>)
 8000bc4:	f001 f837 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET );
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bce:	4828      	ldr	r0, [pc, #160]	; (8000c70 <displayTime+0x220>)
 8000bd0:	f001 f831 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_RESET );
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bda:	4825      	ldr	r0, [pc, #148]	; (8000c70 <displayTime+0x220>)
 8000bdc:	f001 f82b 	bl	8001c36 <HAL_GPIO_WritePin>
		if(isTimerExpired(2)){
 8000be0:	2002      	movs	r0, #2
 8000be2:	f000 fafd 	bl	80011e0 <isTimerExpired>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d035      	beq.n	8000c58 <displayTime+0x208>
			LED = 0;
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <displayTime+0x218>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
//			setTimer(2, TIMEDISPLAY);
//			SCH_Add_Task(t2, 25, 0);
		}

		break;
 8000bf2:	e031      	b.n	8000c58 <displayTime+0x208>
	default:
		display7SEG(trafficA / 10);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a1d      	ldr	r2, [pc, #116]	; (8000c6c <displayTime+0x21c>)
 8000bf8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bfc:	1092      	asrs	r2, r2, #2
 8000bfe:	17db      	asrs	r3, r3, #31
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fd94 	bl	8000730 <display7SEG>
		HAL_GPIO_WritePin ( EN1_GPIO_Port , EN1_Pin , GPIO_PIN_SET );
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0e:	4818      	ldr	r0, [pc, #96]	; (8000c70 <displayTime+0x220>)
 8000c10:	f001 f811 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN2_GPIO_Port , EN2_Pin , GPIO_PIN_SET );
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1a:	4815      	ldr	r0, [pc, #84]	; (8000c70 <displayTime+0x220>)
 8000c1c:	f001 f80b 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN3_GPIO_Port , EN3_Pin , GPIO_PIN_SET );
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c26:	4812      	ldr	r0, [pc, #72]	; (8000c70 <displayTime+0x220>)
 8000c28:	f001 f805 	bl	8001c36 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( EN4_GPIO_Port , EN4_Pin , GPIO_PIN_SET );
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c32:	480f      	ldr	r0, [pc, #60]	; (8000c70 <displayTime+0x220>)
 8000c34:	f000 ffff 	bl	8001c36 <HAL_GPIO_WritePin>
		if(isTimerExpired(2)){
 8000c38:	2002      	movs	r0, #2
 8000c3a:	f000 fad1 	bl	80011e0 <isTimerExpired>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00b      	beq.n	8000c5c <displayTime+0x20c>
			LED = 0;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <displayTime+0x218>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
//			setTimer(2, TIMEDISPLAY);
//			SCH_Add_Task(t2, 25, 0);
		}

		break;
 8000c4a:	e007      	b.n	8000c5c <displayTime+0x20c>
		break;
 8000c4c:	bf00      	nop
 8000c4e:	e006      	b.n	8000c5e <displayTime+0x20e>
		break;
 8000c50:	bf00      	nop
 8000c52:	e004      	b.n	8000c5e <displayTime+0x20e>
		break;
 8000c54:	bf00      	nop
 8000c56:	e002      	b.n	8000c5e <displayTime+0x20e>
		break;
 8000c58:	bf00      	nop
 8000c5a:	e000      	b.n	8000c5e <displayTime+0x20e>
		break;
 8000c5c:	bf00      	nop
	}
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000c0 	.word	0x200000c0
 8000c6c:	66666667 	.word	0x66666667
 8000c70:	40010c00 	.word	0x40010c00

08000c74 <greenA>:
void greenA(){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED1_GPIO_Port , LED1_Pin , GPIO_PIN_SET );
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <greenA+0x2c>)
 8000c80:	f000 ffd9 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED2_GPIO_Port , LED2_Pin , GPIO_PIN_SET );
 8000c84:	2201      	movs	r2, #1
 8000c86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <greenA+0x2c>)
 8000c8c:	f000 ffd3 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED3_GPIO_Port , LED3_Pin , GPIO_PIN_RESET );
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c96:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <greenA+0x2c>)
 8000c98:	f000 ffcd 	bl	8001c36 <HAL_GPIO_WritePin>

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40010800 	.word	0x40010800

08000ca4 <amberA>:
void amberA(){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED1_GPIO_Port , LED1_Pin , GPIO_PIN_SET );
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cae:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <amberA+0x2c>)
 8000cb0:	f000 ffc1 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED2_GPIO_Port , LED2_Pin , GPIO_PIN_RESET );
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <amberA+0x2c>)
 8000cbc:	f000 ffbb 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED3_GPIO_Port , LED3_Pin , GPIO_PIN_SET );
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc6:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <amberA+0x2c>)
 8000cc8:	f000 ffb5 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40010800 	.word	0x40010800

08000cd4 <redA>:
void redA(){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED1_GPIO_Port , LED1_Pin , GPIO_PIN_RESET );
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	4808      	ldr	r0, [pc, #32]	; (8000d00 <redA+0x2c>)
 8000ce0:	f000 ffa9 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED2_GPIO_Port , LED2_Pin , GPIO_PIN_SET );
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <redA+0x2c>)
 8000cec:	f000 ffa3 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED3_GPIO_Port , LED3_Pin , GPIO_PIN_SET );
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf6:	4802      	ldr	r0, [pc, #8]	; (8000d00 <redA+0x2c>)
 8000cf8:	f000 ff9d 	bl	8001c36 <HAL_GPIO_WritePin>

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40010800 	.word	0x40010800

08000d04 <greenB>:
void greenB(){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED4_GPIO_Port , LED4_Pin , GPIO_PIN_SET );
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0e:	4808      	ldr	r0, [pc, #32]	; (8000d30 <greenB+0x2c>)
 8000d10:	f000 ff91 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED5_GPIO_Port , LED5_Pin , GPIO_PIN_SET );
 8000d14:	2201      	movs	r2, #1
 8000d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <greenB+0x2c>)
 8000d1c:	f000 ff8b 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED6_GPIO_Port , LED6_Pin , GPIO_PIN_RESET );
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d26:	4802      	ldr	r0, [pc, #8]	; (8000d30 <greenB+0x2c>)
 8000d28:	f000 ff85 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40010800 	.word	0x40010800

08000d34 <amberB>:
void amberB(){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED4_GPIO_Port , LED4_Pin , GPIO_PIN_SET );
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <amberB+0x2c>)
 8000d40:	f000 ff79 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED5_GPIO_Port , LED5_Pin , GPIO_PIN_RESET );
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <amberB+0x2c>)
 8000d4c:	f000 ff73 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED6_GPIO_Port , LED6_Pin , GPIO_PIN_SET );
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d56:	4802      	ldr	r0, [pc, #8]	; (8000d60 <amberB+0x2c>)
 8000d58:	f000 ff6d 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40010800 	.word	0x40010800

08000d64 <redB>:
void redB(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED4_GPIO_Port , LED4_Pin , GPIO_PIN_RESET );
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <redB+0x2c>)
 8000d70:	f000 ff61 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED5_GPIO_Port , LED5_Pin , GPIO_PIN_SET );
 8000d74:	2201      	movs	r2, #1
 8000d76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <redB+0x2c>)
 8000d7c:	f000 ff5b 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED6_GPIO_Port , LED6_Pin , GPIO_PIN_SET );
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d86:	4802      	ldr	r0, [pc, #8]	; (8000d90 <redB+0x2c>)
 8000d88:	f000 ff55 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40010800 	.word	0x40010800

08000d94 <greenBlinky>:
void greenBlinky(){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED1_GPIO_Port , LED1_Pin , GPIO_PIN_SET );
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d9e:	4810      	ldr	r0, [pc, #64]	; (8000de0 <greenBlinky+0x4c>)
 8000da0:	f000 ff49 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED2_GPIO_Port , LED2_Pin , GPIO_PIN_SET );
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <greenBlinky+0x4c>)
 8000dac:	f000 ff43 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin ( LED3_GPIO_Port , LED3_Pin);
 8000db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db4:	480a      	ldr	r0, [pc, #40]	; (8000de0 <greenBlinky+0x4c>)
 8000db6:	f000 ff56 	bl	8001c66 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin ( LED4_GPIO_Port , LED4_Pin , GPIO_PIN_SET );
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc0:	4807      	ldr	r0, [pc, #28]	; (8000de0 <greenBlinky+0x4c>)
 8000dc2:	f000 ff38 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED5_GPIO_Port , LED5_Pin , GPIO_PIN_SET );
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dcc:	4804      	ldr	r0, [pc, #16]	; (8000de0 <greenBlinky+0x4c>)
 8000dce:	f000 ff32 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin ( LED6_GPIO_Port , LED6_Pin );
 8000dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd6:	4802      	ldr	r0, [pc, #8]	; (8000de0 <greenBlinky+0x4c>)
 8000dd8:	f000 ff45 	bl	8001c66 <HAL_GPIO_TogglePin>
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40010800 	.word	0x40010800

08000de4 <amberBlinky>:
void amberBlinky(){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED1_GPIO_Port , LED1_Pin , GPIO_PIN_SET );
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dee:	4810      	ldr	r0, [pc, #64]	; (8000e30 <amberBlinky+0x4c>)
 8000df0:	f000 ff21 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin ( LED2_GPIO_Port , LED2_Pin );
 8000df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <amberBlinky+0x4c>)
 8000dfa:	f000 ff34 	bl	8001c66 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin ( LED3_GPIO_Port , LED3_Pin , GPIO_PIN_SET );
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e04:	480a      	ldr	r0, [pc, #40]	; (8000e30 <amberBlinky+0x4c>)
 8000e06:	f000 ff16 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED4_GPIO_Port , LED4_Pin , GPIO_PIN_SET );
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e10:	4807      	ldr	r0, [pc, #28]	; (8000e30 <amberBlinky+0x4c>)
 8000e12:	f000 ff10 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin ( LED5_GPIO_Port , LED5_Pin );
 8000e16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <amberBlinky+0x4c>)
 8000e1c:	f000 ff23 	bl	8001c66 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin ( LED6_GPIO_Port , LED6_Pin , GPIO_PIN_SET );
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e26:	4802      	ldr	r0, [pc, #8]	; (8000e30 <amberBlinky+0x4c>)
 8000e28:	f000 ff05 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40010800 	.word	0x40010800

08000e34 <redBlinky>:
void redBlinky(){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin ( LED1_GPIO_Port , LED1_Pin );
 8000e38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3c:	4810      	ldr	r0, [pc, #64]	; (8000e80 <redBlinky+0x4c>)
 8000e3e:	f000 ff12 	bl	8001c66 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin ( LED2_GPIO_Port , LED2_Pin , GPIO_PIN_SET );
 8000e42:	2201      	movs	r2, #1
 8000e44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <redBlinky+0x4c>)
 8000e4a:	f000 fef4 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED3_GPIO_Port , LED3_Pin , GPIO_PIN_SET );
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e54:	480a      	ldr	r0, [pc, #40]	; (8000e80 <redBlinky+0x4c>)
 8000e56:	f000 feee 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin ( LED4_GPIO_Port , LED4_Pin );
 8000e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5e:	4808      	ldr	r0, [pc, #32]	; (8000e80 <redBlinky+0x4c>)
 8000e60:	f000 ff01 	bl	8001c66 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin ( LED5_GPIO_Port , LED5_Pin , GPIO_PIN_SET );
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <redBlinky+0x4c>)
 8000e6c:	f000 fee3 	bl	8001c36 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED6_GPIO_Port , LED6_Pin , GPIO_PIN_SET );
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e76:	4802      	ldr	r0, [pc, #8]	; (8000e80 <redBlinky+0x4c>)
 8000e78:	f000 fedd 	bl	8001c36 <HAL_GPIO_WritePin>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40010800 	.word	0x40010800

08000e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8a:	f000 fbd3 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8e:	f000 f8a7 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000e92:	f000 f8e1 	bl	8001058 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000e96:	f000 f92b 	bl	80010f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  int mode = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
//  setTimer(2, 250);


  HAL_TIM_Base_Start_IT(&htim2);
 8000e9e:	4845      	ldr	r0, [pc, #276]	; (8000fb4 <main+0x130>)
 8000ea0:	f001 fb26 	bl	80024f0 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000ea4:	f000 f9f2 	bl	800128c <SCH_Init>
  void* blink = testLed;
 8000ea8:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <main+0x134>)
 8000eaa:	603b      	str	r3, [r7, #0]
  initAutomatic();
 8000eac:	f7ff fa14 	bl	80002d8 <initAutomatic>

  SCH_Add_Task(t0, 100, 100);
 8000eb0:	4b42      	ldr	r3, [pc, #264]	; (8000fbc <main+0x138>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2264      	movs	r2, #100	; 0x64
 8000eb6:	2164      	movs	r1, #100	; 0x64
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fa3f 	bl	800133c <SCH_Add_Task>
  SCH_Add_Task(t1, 100, 100);
 8000ebe:	4b40      	ldr	r3, [pc, #256]	; (8000fc0 <main+0x13c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2264      	movs	r2, #100	; 0x64
 8000ec4:	2164      	movs	r1, #100	; 0x64
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 fa38 	bl	800133c <SCH_Add_Task>
  SCH_Add_Task(t2, 25, 25);
 8000ecc:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <main+0x140>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2219      	movs	r2, #25
 8000ed2:	2119      	movs	r1, #25
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 fa31 	bl	800133c <SCH_Add_Task>
  SCH_Add_Task(t3, 50, 50);
 8000eda:	4b3b      	ldr	r3, [pc, #236]	; (8000fc8 <main+0x144>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2232      	movs	r2, #50	; 0x32
 8000ee0:	2132      	movs	r1, #50	; 0x32
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fa2a 	bl	800133c <SCH_Add_Task>
  SCH_Add_Task(t4, 50, 50);
 8000ee8:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <main+0x148>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2232      	movs	r2, #50	; 0x32
 8000eee:	2132      	movs	r1, #50	; 0x32
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 fa23 	bl	800133c <SCH_Add_Task>
  SCH_Add_Task(blink, 500, 0);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa1c 	bl	800133c <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch_Tasks();
 8000f04:	f000 f9ea 	bl	80012dc <SCH_Dispatch_Tasks>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d844      	bhi.n	8000f98 <main+0x114>
 8000f0e:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <main+0x90>)
 8000f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	08000f43 	.word	0x08000f43
 8000f1c:	08000f61 	.word	0x08000f61
 8000f20:	08000f7f 	.word	0x08000f7f
	  switch(mode){
		  case 0:
			  automaticRun();
 8000f24:	f7ff fa24 	bl	8000370 <automaticRun>
			  if(isButtonPressed(0)){
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff f991 	bl	8000250 <isButtonPressed>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d036      	beq.n	8000fa2 <main+0x11e>
				  timeTemp = timeRed;
 8000f34:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <main+0x14c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <main+0x150>)
 8000f3a:	6013      	str	r3, [r2, #0]
				  mode = 1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
//				  setTimer(0, 500);
//				  SCH_Add_Task(t4, 50, 0);
//				  testLed();
			  }
			  break;
 8000f40:	e02f      	b.n	8000fa2 <main+0x11e>
		  case 1:
			  modifyRed();
 8000f42:	f7ff fb93 	bl	800066c <modifyRed>
			  if(isButtonPressed(0)){
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff f982 	bl	8000250 <isButtonPressed>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d029      	beq.n	8000fa6 <main+0x122>
				  timeTemp = timeAmber;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <main+0x154>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <main+0x150>)
 8000f58:	6013      	str	r3, [r2, #0]
				  mode = 2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	607b      	str	r3, [r7, #4]
//				  setTimer(0, 500);
//				  SCH_Add_Task(t4, 50, 0);
//				  testLed();
			  }
			  break;
 8000f5e:	e022      	b.n	8000fa6 <main+0x122>
		  case 2:
			  modifyAmber();
 8000f60:	f7ff fb34 	bl	80005cc <modifyAmber>
			  if(isButtonPressed(0)){
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff f973 	bl	8000250 <isButtonPressed>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d01c      	beq.n	8000faa <main+0x126>
				  timeTemp = timeGreen;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <main+0x158>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <main+0x150>)
 8000f76:	6013      	str	r3, [r2, #0]
				  mode = 3;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	607b      	str	r3, [r7, #4]
//				  setTimer(0, 500);
//				  SCH_Add_Task(t4, 50, 0);
//				  testLed();
			  }
			  break;
 8000f7c:	e015      	b.n	8000faa <main+0x126>
		  case 3:
			  modifyGreen();
 8000f7e:	f7ff fad5 	bl	800052c <modifyGreen>
			  if(isButtonPressed(0)){
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff f964 	bl	8000250 <isButtonPressed>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00f      	beq.n	8000fae <main+0x12a>
				  mode = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
				  afterModify();
 8000f92:	f7ff f9cd 	bl	8000330 <afterModify>
//				  testLed();
			  }
			  break;
 8000f96:	e00a      	b.n	8000fae <main+0x12a>
		  default:
			  mode = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	607b      	str	r3, [r7, #4]
			  afterModify();
 8000f9c:	f7ff f9c8 	bl	8000330 <afterModify>
			  break;
 8000fa0:	e006      	b.n	8000fb0 <main+0x12c>
			  break;
 8000fa2:	bf00      	nop
 8000fa4:	e7ae      	b.n	8000f04 <main+0x80>
			  break;
 8000fa6:	bf00      	nop
 8000fa8:	e7ac      	b.n	8000f04 <main+0x80>
			  break;
 8000faa:	bf00      	nop
 8000fac:	e7aa      	b.n	8000f04 <main+0x80>
			  break;
 8000fae:	bf00      	nop
	  SCH_Dispatch_Tasks();
 8000fb0:	e7a8      	b.n	8000f04 <main+0x80>
 8000fb2:	bf00      	nop
 8000fb4:	20000100 	.word	0x20000100
 8000fb8:	0800014d 	.word	0x0800014d
 8000fbc:	20000020 	.word	0x20000020
 8000fc0:	20000024 	.word	0x20000024
 8000fc4:	20000028 	.word	0x20000028
 8000fc8:	2000002c 	.word	0x2000002c
 8000fcc:	20000030 	.word	0x20000030
 8000fd0:	200000fc 	.word	0x200000fc
 8000fd4:	200000f4 	.word	0x200000f4
 8000fd8:	200000f8 	.word	0x200000f8
 8000fdc:	200000f0 	.word	0x200000f0

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b090      	sub	sp, #64	; 0x40
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	2228      	movs	r2, #40	; 0x28
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 fe44 	bl	8002c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001006:	2301      	movs	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100a:	2310      	movs	r3, #16
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0318 	add.w	r3, r7, #24
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fe3e 	bl	8001c98 <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001022:	f000 f8d8 	bl	80011d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f001 f8aa 	bl	8002198 <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800104a:	f000 f8c4 	bl	80011d6 <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3740      	adds	r7, #64	; 0x40
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	463b      	mov	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_TIM2_Init+0x94>)
 8001076:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800107a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_TIM2_Init+0x94>)
 800107e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001082:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_TIM2_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_TIM2_Init+0x94>)
 800108c:	2209      	movs	r2, #9
 800108e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_TIM2_Init+0x94>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_TIM2_Init+0x94>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800109c:	4813      	ldr	r0, [pc, #76]	; (80010ec <MX_TIM2_Init+0x94>)
 800109e:	f001 f9d7 	bl	8002450 <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010a8:	f000 f895 	bl	80011d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	4619      	mov	r1, r3
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <MX_TIM2_Init+0x94>)
 80010ba:	f001 fb55 	bl	8002768 <HAL_TIM_ConfigClockSource>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010c4:	f000 f887 	bl	80011d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_TIM2_Init+0x94>)
 80010d6:	f001 fd2d 	bl	8002b34 <HAL_TIMEx_MasterConfigSynchronization>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010e0:	f000 f879 	bl	80011d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000100 	.word	0x20000100

080010f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <MX_GPIO_Init+0xb8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <MX_GPIO_Init+0xb8>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <MX_GPIO_Init+0xb8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <MX_GPIO_Init+0xb8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a21      	ldr	r2, [pc, #132]	; (80011a8 <MX_GPIO_Init+0xb8>)
 8001122:	f043 0308 	orr.w	r3, r3, #8
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_GPIO_Init+0xb8>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|EN1_Pin
 8001134:	2200      	movs	r2, #0
 8001136:	f24f 217f 	movw	r1, #62079	; 0xf27f
 800113a:	481c      	ldr	r0, [pc, #112]	; (80011ac <MX_GPIO_Init+0xbc>)
 800113c:	f000 fd7b 	bl	8001c36 <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin|EN4_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|blinkyLed_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001146:	481a      	ldr	r0, [pc, #104]	; (80011b0 <MX_GPIO_Init+0xc0>)
 8001148:	f000 fd75 	bl	8001c36 <HAL_GPIO_WritePin>
                          |LED5_Pin|LED6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : butt1_Pin butt2_Pin butt3_Pin */
  GPIO_InitStruct.Pin = butt1_Pin|butt2_Pin|butt3_Pin;
 800114c:	230e      	movs	r3, #14
 800114e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001154:	2301      	movs	r3, #1
 8001156:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0308 	add.w	r3, r7, #8
 800115c:	4619      	mov	r1, r3
 800115e:	4814      	ldr	r0, [pc, #80]	; (80011b0 <MX_GPIO_Init+0xc0>)
 8001160:	f000 fbd8 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin blinkyLed_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|EN1_Pin
 8001164:	f24f 237f 	movw	r3, #62079	; 0xf27f
 8001168:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin|EN4_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|blinkyLed_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2302      	movs	r3, #2
 8001174:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	4619      	mov	r1, r3
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <MX_GPIO_Init+0xbc>)
 800117e:	f000 fbc9 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin LED6_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8001182:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001186:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin|LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2302      	movs	r3, #2
 8001192:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4619      	mov	r1, r3
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_GPIO_Init+0xc0>)
 800119c:	f000 fbba 	bl	8001914 <HAL_GPIO_Init>

}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010c00 	.word	0x40010c00
 80011b0:	40010800 	.word	0x40010800

080011b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c4:	d101      	bne.n	80011ca <HAL_TIM_PeriodElapsedCallback+0x16>
		buttonReading();
 80011c6:	f7fe ffcd 	bl	8000164 <buttonReading>
	}
	SCH_Update();
 80011ca:	f000 f879 	bl	80012c0 <SCH_Update>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011da:	b672      	cpsid	i
}
 80011dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011de:	e7fe      	b.n	80011de <Error_Handler+0x8>

080011e0 <isTimerExpired>:

#include "scheduler.h"
int timer_flag[10];
int timer_counter[10];

int isTimerExpired(int index){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	if(timer_flag[index] == 1){
 80011e8:	4a09      	ldr	r2, [pc, #36]	; (8001210 <isTimerExpired+0x30>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d106      	bne.n	8001202 <isTimerExpired+0x22>
		timer_flag[index] = 0;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <isTimerExpired+0x30>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2100      	movs	r1, #0
 80011fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <isTimerExpired+0x24>
	}
	return 0;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000174 	.word	0x20000174

08001214 <st0>:
void st0(){
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	timer_flag[0] = 1;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <st0+0x14>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000174 	.word	0x20000174

0800122c <st1>:
void st1(){
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	timer_flag[1] = 1;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <st1+0x14>)
 8001232:	2201      	movs	r2, #1
 8001234:	605a      	str	r2, [r3, #4]
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000174 	.word	0x20000174

08001244 <st2>:
void st2(){
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	timer_flag[2] = 1;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <st2+0x14>)
 800124a:	2201      	movs	r2, #1
 800124c:	609a      	str	r2, [r3, #8]
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000174 	.word	0x20000174

0800125c <st3>:
void st3(){
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	timer_flag[3] = 1;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <st3+0x14>)
 8001262:	2201      	movs	r2, #1
 8001264:	60da      	str	r2, [r3, #12]
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000174 	.word	0x20000174

08001274 <st4>:
void st4(){
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
	timer_flag[4] = 1;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <st4+0x14>)
 800127a:	2201      	movs	r2, #1
 800127c:	611a      	str	r2, [r3, #16]
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000174 	.word	0x20000174

0800128c <SCH_Init>:

sTaskList taskList;
// MUST BE ADJUSTED FOR EACH NEW PROJECT

//sTask SCH_tasks_G[SCH_MAX_TASKS];
void SCH_Init(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	sTask* temp;
	for (; taskList.head;) {
 8001292:	e00a      	b.n	80012aa <SCH_Init+0x1e>
		temp = taskList.head;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <SCH_Init+0x30>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	607b      	str	r3, [r7, #4]
		taskList.head = (taskList.head)->next;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <SCH_Init+0x30>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <SCH_Init+0x30>)
 80012a2:	6013      	str	r3, [r2, #0]
		free(temp);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f001 fce1 	bl	8002c6c <free>
	for (; taskList.head;) {
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <SCH_Init+0x30>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f0      	bne.n	8001294 <SCH_Init+0x8>
	// Reset the global error variable
	// − SCH_Delete_Task () w ill generate an error code ,
	// ( because the task array i s empty)
	//Timer_init () ;
	//Watchdog_init () ;
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000148 	.word	0x20000148

080012c0 <SCH_Update>:
void SCH_Update(void) {
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
	// NOTE: calculations are in *TICKS* ( not milliseconds )
	taskList.head->Delay--;
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SCH_Update+0x18>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	3a01      	subs	r2, #1
 80012cc:	605a      	str	r2, [r3, #4]
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000148 	.word	0x20000148

080012dc <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
	sTask *temp = taskList.head;
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <SCH_Dispatch_Tasks+0x5c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	607b      	str	r3, [r7, #4]
// Dispatches ( runs ) the next task ( i f one i s ready )
	while(temp){
 80012e8:	e01c      	b.n	8001324 <SCH_Dispatch_Tasks+0x48>
		if (temp->Delay == 0) {
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d11c      	bne.n	800132c <SCH_Dispatch_Tasks+0x50>
			temp->pTask(); // Run the task
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4798      	blx	r3
//			temp->RunMe = 0; // Reset / reduce RunMe fl ag
// Periodic tasks w ill automatically run again
// − i f thi s i s a ’one shot ’ task , remove i t from the array
			SCH_Delete_Task();
 80012f8:	f000 f898 	bl	800142c <SCH_Delete_Task>
			if (temp->Period > 0) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dd09      	ble.n	8001318 <SCH_Dispatch_Tasks+0x3c>
				SCH_Add_Task(temp->pTask, temp->Period, temp->Period);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	4619      	mov	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	461a      	mov	r2, r3
 8001314:	f000 f812 	bl	800133c <SCH_Add_Task>
			}
			free(temp);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f001 fca7 	bl	8002c6c <free>
			temp = taskList.head;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SCH_Dispatch_Tasks+0x5c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	607b      	str	r3, [r7, #4]
	while(temp){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1df      	bne.n	80012ea <SCH_Dispatch_Tasks+0xe>
		} else break;
	}
// Report system status
// The scheduler enters idle mode at thi s point
//SCH_Go_To_Sleep() ;
}
 800132a:	e000      	b.n	800132e <SCH_Dispatch_Tasks+0x52>
		} else break;
 800132c:	bf00      	nop
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000148 	.word	0x20000148

0800133c <SCH_Add_Task>:
void SCH_Add_Task(void function(), unsigned int DELAY, unsigned int PERIOD) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
	sTask* temp;
	sTask* prev;
	sTask* i = taskList.head;
 8001348:	4b37      	ldr	r3, [pc, #220]	; (8001428 <SCH_Add_Task+0xec>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
	temp = (sTask*) malloc(sizeof(sTask));
 800134e:	2018      	movs	r0, #24
 8001350:	f001 fc84 	bl	8002c5c <malloc>
 8001354:	4603      	mov	r3, r0
 8001356:	613b      	str	r3, [r7, #16]
	temp->pTask = function;
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	601a      	str	r2, [r3, #0]
	temp->Delay = DELAY;
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	605a      	str	r2, [r3, #4]
	temp->Period = PERIOD;
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	609a      	str	r2, [r3, #8]
	temp->RunMe = 0;
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
	temp->next = NULL;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
	int count = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
	while(i){
 800137a:	e00e      	b.n	800139a <SCH_Add_Task+0x5e>
		count += i->Delay;
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	4413      	add	r3, r2
 8001384:	617b      	str	r3, [r7, #20]
		if(temp->Delay < count) break;
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	429a      	cmp	r2, r3
 800138e:	dc08      	bgt.n	80013a2 <SCH_Add_Task+0x66>
		prev = i;
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	61fb      	str	r3, [r7, #28]
		i = i->next;
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	61bb      	str	r3, [r7, #24]
	while(i){
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1ed      	bne.n	800137c <SCH_Add_Task+0x40>
 80013a0:	e000      	b.n	80013a4 <SCH_Add_Task+0x68>
		if(temp->Delay < count) break;
 80013a2:	bf00      	nop
	}
	if(!taskList.head) taskList.head = temp;
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <SCH_Add_Task+0xec>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d103      	bne.n	80013b4 <SCH_Add_Task+0x78>
 80013ac:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <SCH_Add_Task+0xec>)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	6013      	str	r3, [r2, #0]
	// F i r st find a gap in the array ( i f there i s one)
	// Have we reached the end of the l i s t ?
	// I f we ’ re here , there i s a space in the task array

	// return position of task ( to allow l at e r deletion )
}
 80013b2:	e035      	b.n	8001420 <SCH_Add_Task+0xe4>
	else if(!i) {
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d109      	bne.n	80013ce <SCH_Add_Task+0x92>
		temp->Delay -= count;
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	1ad2      	subs	r2, r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	605a      	str	r2, [r3, #4]
		prev->next = temp;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	615a      	str	r2, [r3, #20]
}
 80013cc:	e028      	b.n	8001420 <SCH_Add_Task+0xe4>
	} else if(i == taskList.head){
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <SCH_Add_Task+0xec>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d10d      	bne.n	80013f4 <SCH_Add_Task+0xb8>
		i->Delay = i->Delay - temp->Delay;
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	1ad2      	subs	r2, r2, r3
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	605a      	str	r2, [r3, #4]
		temp->next = i;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	615a      	str	r2, [r3, #20]
		taskList.head = temp;
 80013ec:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <SCH_Add_Task+0xec>)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	6013      	str	r3, [r2, #0]
}
 80013f2:	e015      	b.n	8001420 <SCH_Add_Task+0xe4>
		temp->Delay = temp->Delay - (count - i->Delay);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	6979      	ldr	r1, [r7, #20]
 80013fe:	1acb      	subs	r3, r1, r3
 8001400:	1ad2      	subs	r2, r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	605a      	str	r2, [r3, #4]
		prev->next = temp;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	615a      	str	r2, [r3, #20]
		i->Delay = i->Delay - temp->Delay;
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	1ad2      	subs	r2, r2, r3
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	605a      	str	r2, [r3, #4]
		temp->next = i;
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	615a      	str	r2, [r3, #20]
}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000148 	.word	0x20000148

0800142c <SCH_Delete_Task>:
unsigned char SCH_Delete_Task() {
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
	unsigned char Return_code;
	if(taskList.head == 0) Return_code = RETURN_ERROR;
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <SCH_Delete_Task+0x30>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d102      	bne.n	8001440 <SCH_Delete_Task+0x14>
 800143a:	2301      	movs	r3, #1
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	e006      	b.n	800144e <SCH_Delete_Task+0x22>
	else {
		Return_code = RETURN_NORMAL;
 8001440:	2300      	movs	r3, #0
 8001442:	71fb      	strb	r3, [r7, #7]
		taskList.head = taskList.head->next;
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <SCH_Delete_Task+0x30>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <SCH_Delete_Task+0x30>)
 800144c:	6013      	str	r3, [r2, #0]
	}

	return Return_code; // return status
 800144e:	79fb      	ldrb	r3, [r7, #7]
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000148 	.word	0x20000148

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_MspInit+0x5c>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4a14      	ldr	r2, [pc, #80]	; (80014bc <HAL_MspInit+0x5c>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6193      	str	r3, [r2, #24]
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_MspInit+0x5c>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_MspInit+0x5c>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_MspInit+0x5c>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <HAL_MspInit+0x5c>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_MspInit+0x60>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_MspInit+0x60>)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	bf00      	nop
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010000 	.word	0x40010000

080014c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d4:	d113      	bne.n	80014fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_TIM_Base_MspInit+0x44>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_TIM_Base_MspInit+0x44>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_TIM_Base_MspInit+0x44>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	201c      	movs	r0, #28
 80014f4:	f000 f9d7 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f8:	201c      	movs	r0, #28
 80014fa:	f000 f9f0 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001552:	f000 f8b5 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <TIM2_IRQHandler+0x10>)
 8001562:	f001 f811 	bl	8002588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000100 	.word	0x20000100

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	; (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f001 fb32 	bl	8002c08 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	; (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20002800 	.word	0x20002800
 80015d0:	00000400 	.word	0x00000400
 80015d4:	200000c4 	.word	0x200000c4
 80015d8:	200001b0 	.word	0x200001b0

080015dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e8:	f7ff fff8 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ec:	480b      	ldr	r0, [pc, #44]	; (800161c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015ee:	490c      	ldr	r1, [pc, #48]	; (8001620 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001604:	4c09      	ldr	r4, [pc, #36]	; (800162c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001612:	f001 faff 	bl	8002c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001616:	f7ff fc35 	bl	8000e84 <main>
  bx lr
 800161a:	4770      	bx	lr
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001624:	08002e58 	.word	0x08002e58
  ldr r2, =_sbss
 8001628:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800162c:	200001b0 	.word	0x200001b0

08001630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC1_2_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_Init+0x28>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_Init+0x28>)
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 f923 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	200f      	movs	r0, #15
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff ff06 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40022000 	.word	0x40022000

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f93b 	bl	80018fa <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 f903 	bl	80018a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000034 	.word	0x20000034
 80016b8:	2000003c 	.word	0x2000003c
 80016bc:	20000038 	.word	0x20000038

080016c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_IncTick+0x1c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_IncTick+0x20>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a03      	ldr	r2, [pc, #12]	; (80016e0 <HAL_IncTick+0x20>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	2000003c 	.word	0x2000003c
 80016e0:	2000019c 	.word	0x2000019c

080016e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <HAL_GetTick+0x10>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	2000019c 	.word	0x2000019c

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	; (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db0b      	blt.n	8001786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4906      	ldr	r1, [pc, #24]	; (8001790 <__NVIC_EnableIRQ+0x34>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	2001      	movs	r0, #1
 800177e:	fa00 f202 	lsl.w	r2, r0, r2
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	; (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	; (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	; 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff90 	bl	8001794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff2d 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff42 	bl	8001740 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff90 	bl	80017e8 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5f 	bl	8001794 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff35 	bl	800175c <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa2 	bl	800184c <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b08b      	sub	sp, #44	; 0x2c
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001926:	e148      	b.n	8001bba <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001928:	2201      	movs	r2, #1
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	429a      	cmp	r2, r3
 8001942:	f040 8137 	bne.w	8001bb4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4aa3      	ldr	r2, [pc, #652]	; (8001bd8 <HAL_GPIO_Init+0x2c4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d05e      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
 8001950:	4aa1      	ldr	r2, [pc, #644]	; (8001bd8 <HAL_GPIO_Init+0x2c4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d875      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 8001956:	4aa1      	ldr	r2, [pc, #644]	; (8001bdc <HAL_GPIO_Init+0x2c8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d058      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
 800195c:	4a9f      	ldr	r2, [pc, #636]	; (8001bdc <HAL_GPIO_Init+0x2c8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d86f      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 8001962:	4a9f      	ldr	r2, [pc, #636]	; (8001be0 <HAL_GPIO_Init+0x2cc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d052      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
 8001968:	4a9d      	ldr	r2, [pc, #628]	; (8001be0 <HAL_GPIO_Init+0x2cc>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d869      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 800196e:	4a9d      	ldr	r2, [pc, #628]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d04c      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
 8001974:	4a9b      	ldr	r2, [pc, #620]	; (8001be4 <HAL_GPIO_Init+0x2d0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d863      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 800197a:	4a9b      	ldr	r2, [pc, #620]	; (8001be8 <HAL_GPIO_Init+0x2d4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d046      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
 8001980:	4a99      	ldr	r2, [pc, #612]	; (8001be8 <HAL_GPIO_Init+0x2d4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d85d      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 8001986:	2b12      	cmp	r3, #18
 8001988:	d82a      	bhi.n	80019e0 <HAL_GPIO_Init+0xcc>
 800198a:	2b12      	cmp	r3, #18
 800198c:	d859      	bhi.n	8001a42 <HAL_GPIO_Init+0x12e>
 800198e:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <HAL_GPIO_Init+0x80>)
 8001990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001994:	08001a0f 	.word	0x08001a0f
 8001998:	080019e9 	.word	0x080019e9
 800199c:	080019fb 	.word	0x080019fb
 80019a0:	08001a3d 	.word	0x08001a3d
 80019a4:	08001a43 	.word	0x08001a43
 80019a8:	08001a43 	.word	0x08001a43
 80019ac:	08001a43 	.word	0x08001a43
 80019b0:	08001a43 	.word	0x08001a43
 80019b4:	08001a43 	.word	0x08001a43
 80019b8:	08001a43 	.word	0x08001a43
 80019bc:	08001a43 	.word	0x08001a43
 80019c0:	08001a43 	.word	0x08001a43
 80019c4:	08001a43 	.word	0x08001a43
 80019c8:	08001a43 	.word	0x08001a43
 80019cc:	08001a43 	.word	0x08001a43
 80019d0:	08001a43 	.word	0x08001a43
 80019d4:	08001a43 	.word	0x08001a43
 80019d8:	080019f1 	.word	0x080019f1
 80019dc:	08001a05 	.word	0x08001a05
 80019e0:	4a82      	ldr	r2, [pc, #520]	; (8001bec <HAL_GPIO_Init+0x2d8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d013      	beq.n	8001a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019e6:	e02c      	b.n	8001a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e029      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	3304      	adds	r3, #4
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e024      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	3308      	adds	r3, #8
 8001a00:	623b      	str	r3, [r7, #32]
          break;
 8001a02:	e01f      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	330c      	adds	r3, #12
 8001a0a:	623b      	str	r3, [r7, #32]
          break;
 8001a0c:	e01a      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a16:	2304      	movs	r3, #4
 8001a18:	623b      	str	r3, [r7, #32]
          break;
 8001a1a:	e013      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d105      	bne.n	8001a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a24:	2308      	movs	r3, #8
 8001a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	611a      	str	r2, [r3, #16]
          break;
 8001a2e:	e009      	b.n	8001a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a30:	2308      	movs	r3, #8
 8001a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	615a      	str	r2, [r3, #20]
          break;
 8001a3a:	e003      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
          break;
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x130>
          break;
 8001a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	2bff      	cmp	r3, #255	; 0xff
 8001a48:	d801      	bhi.n	8001a4e <HAL_GPIO_Init+0x13a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	e001      	b.n	8001a52 <HAL_GPIO_Init+0x13e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3304      	adds	r3, #4
 8001a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2bff      	cmp	r3, #255	; 0xff
 8001a58:	d802      	bhi.n	8001a60 <HAL_GPIO_Init+0x14c>
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	e002      	b.n	8001a66 <HAL_GPIO_Init+0x152>
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	3b08      	subs	r3, #8
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	401a      	ands	r2, r3
 8001a78:	6a39      	ldr	r1, [r7, #32]
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	431a      	orrs	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 8090 	beq.w	8001bb4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a94:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_GPIO_Init+0x2dc>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a55      	ldr	r2, [pc, #340]	; (8001bf0 <HAL_GPIO_Init+0x2dc>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_GPIO_Init+0x2dc>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aac:	4a51      	ldr	r2, [pc, #324]	; (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a49      	ldr	r2, [pc, #292]	; (8001bf8 <HAL_GPIO_Init+0x2e4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00d      	beq.n	8001af4 <HAL_GPIO_Init+0x1e0>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a48      	ldr	r2, [pc, #288]	; (8001bfc <HAL_GPIO_Init+0x2e8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d007      	beq.n	8001af0 <HAL_GPIO_Init+0x1dc>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a47      	ldr	r2, [pc, #284]	; (8001c00 <HAL_GPIO_Init+0x2ec>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d101      	bne.n	8001aec <HAL_GPIO_Init+0x1d8>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e004      	b.n	8001af6 <HAL_GPIO_Init+0x1e2>
 8001aec:	2303      	movs	r3, #3
 8001aee:	e002      	b.n	8001af6 <HAL_GPIO_Init+0x1e2>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_GPIO_Init+0x1e2>
 8001af4:	2300      	movs	r3, #0
 8001af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af8:	f002 0203 	and.w	r2, r2, #3
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	4093      	lsls	r3, r2
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b06:	493b      	ldr	r1, [pc, #236]	; (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b20:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4937      	ldr	r1, [pc, #220]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b2e:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4933      	ldr	r1, [pc, #204]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d006      	beq.n	8001b56 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b48:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	492d      	ldr	r1, [pc, #180]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60cb      	str	r3, [r1, #12]
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b56:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	4929      	ldr	r1, [pc, #164]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	4923      	ldr	r1, [pc, #140]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	604b      	str	r3, [r1, #4]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	491f      	ldr	r1, [pc, #124]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4919      	ldr	r1, [pc, #100]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ba6:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4915      	ldr	r1, [pc, #84]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f47f aeaf 	bne.w	8001928 <HAL_GPIO_Init+0x14>
  }
}
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
 8001bce:	372c      	adds	r7, #44	; 0x2c
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	10320000 	.word	0x10320000
 8001bdc:	10310000 	.word	0x10310000
 8001be0:	10220000 	.word	0x10220000
 8001be4:	10210000 	.word	0x10210000
 8001be8:	10120000 	.word	0x10120000
 8001bec:	10110000 	.word	0x10110000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	40010c00 	.word	0x40010c00
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	887b      	ldrh	r3, [r7, #2]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	807b      	strh	r3, [r7, #2]
 8001c42:	4613      	mov	r3, r2
 8001c44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c46:	787b      	ldrb	r3, [r7, #1]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4c:	887a      	ldrh	r2, [r7, #2]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c52:	e003      	b.n	8001c5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	041a      	lsls	r2, r3, #16
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	611a      	str	r2, [r3, #16]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c78:	887a      	ldrh	r2, [r7, #2]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	041a      	lsls	r2, r3, #16
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	400b      	ands	r3, r1
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	611a      	str	r2, [r3, #16]
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e26c      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8087 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb8:	4b92      	ldr	r3, [pc, #584]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 030c 	and.w	r3, r3, #12
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d00c      	beq.n	8001cde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc4:	4b8f      	ldr	r3, [pc, #572]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 030c 	and.w	r3, r3, #12
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d112      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5e>
 8001cd0:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	4b89      	ldr	r3, [pc, #548]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d06c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x12c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d168      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e246      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x76>
 8001d00:	4b80      	ldr	r3, [pc, #512]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a7f      	ldr	r2, [pc, #508]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e02e      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x98>
 8001d16:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a7a      	ldr	r2, [pc, #488]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b78      	ldr	r3, [pc, #480]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a77      	ldr	r2, [pc, #476]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e01d      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0xbc>
 8001d3a:	4b72      	ldr	r3, [pc, #456]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a71      	ldr	r2, [pc, #452]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b6f      	ldr	r3, [pc, #444]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a6e      	ldr	r2, [pc, #440]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0xd4>
 8001d54:	4b6b      	ldr	r3, [pc, #428]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a6a      	ldr	r2, [pc, #424]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d013      	beq.n	8001d9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fcb6 	bl	80016e4 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fcb2 	bl	80016e4 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e1fa      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0xe4>
 8001d9a:	e014      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fca2 	bl	80016e4 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da4:	f7ff fc9e 	bl	80016e4 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	; 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1e6      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x10c>
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d063      	beq.n	8001e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dde:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d11c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x18c>
 8001dea:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d116      	bne.n	8001e24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001df6:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d005      	beq.n	8001e0e <HAL_RCC_OscConfig+0x176>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e1ba      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4939      	ldr	r1, [pc, #228]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e22:	e03a      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d020      	beq.n	8001e6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e2c:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e32:	f7ff fc57 	bl	80016e4 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3a:	f7ff fc53 	bl	80016e4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e19b      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4927      	ldr	r1, [pc, #156]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	600b      	str	r3, [r1, #0]
 8001e6c:	e015      	b.n	8001e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_RCC_OscConfig+0x270>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fc36 	bl	80016e4 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fc32 	bl	80016e4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e17a      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d03a      	beq.n	8001f1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d019      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb4:	f7ff fc16 	bl	80016e4 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fc12 	bl	80016e4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e15a      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f000 fa9a 	bl	8002414 <RCC_Delay>
 8001ee0:	e01c      	b.n	8001f1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_RCC_OscConfig+0x274>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee8:	f7ff fbfc 	bl	80016e4 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eee:	e00f      	b.n	8001f10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7ff fbf8 	bl	80016e4 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d908      	bls.n	8001f10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e140      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	42420000 	.word	0x42420000
 8001f0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f10:	4b9e      	ldr	r3, [pc, #632]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1e9      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a6 	beq.w	8002076 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2e:	4b97      	ldr	r3, [pc, #604]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10d      	bne.n	8001f56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	4b94      	ldr	r3, [pc, #592]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a93      	ldr	r2, [pc, #588]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b91      	ldr	r3, [pc, #580]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f52:	2301      	movs	r3, #1
 8001f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	4b8e      	ldr	r3, [pc, #568]	; (8002190 <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d118      	bne.n	8001f94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f62:	4b8b      	ldr	r3, [pc, #556]	; (8002190 <HAL_RCC_OscConfig+0x4f8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a8a      	ldr	r2, [pc, #552]	; (8002190 <HAL_RCC_OscConfig+0x4f8>)
 8001f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fbb9 	bl	80016e4 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f76:	f7ff fbb5 	bl	80016e4 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b64      	cmp	r3, #100	; 0x64
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0fd      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	4b81      	ldr	r3, [pc, #516]	; (8002190 <HAL_RCC_OscConfig+0x4f8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d106      	bne.n	8001faa <HAL_RCC_OscConfig+0x312>
 8001f9c:	4b7b      	ldr	r3, [pc, #492]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4a7a      	ldr	r2, [pc, #488]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6213      	str	r3, [r2, #32]
 8001fa8:	e02d      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x334>
 8001fb2:	4b76      	ldr	r3, [pc, #472]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4a75      	ldr	r2, [pc, #468]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6213      	str	r3, [r2, #32]
 8001fbe:	4b73      	ldr	r3, [pc, #460]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a72      	ldr	r2, [pc, #456]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	e01c      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d10c      	bne.n	8001fee <HAL_RCC_OscConfig+0x356>
 8001fd4:	4b6d      	ldr	r3, [pc, #436]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	4a6c      	ldr	r2, [pc, #432]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6213      	str	r3, [r2, #32]
 8001fe0:	4b6a      	ldr	r3, [pc, #424]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a69      	ldr	r2, [pc, #420]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	6213      	str	r3, [r2, #32]
 8001fec:	e00b      	b.n	8002006 <HAL_RCC_OscConfig+0x36e>
 8001fee:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	4a66      	ldr	r2, [pc, #408]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	f023 0301 	bic.w	r3, r3, #1
 8001ff8:	6213      	str	r3, [r2, #32]
 8001ffa:	4b64      	ldr	r3, [pc, #400]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4a63      	ldr	r2, [pc, #396]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8002000:	f023 0304 	bic.w	r3, r3, #4
 8002004:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d015      	beq.n	800203a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200e:	f7ff fb69 	bl	80016e4 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff fb65 	bl	80016e4 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0ab      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202c:	4b57      	ldr	r3, [pc, #348]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0ee      	beq.n	8002016 <HAL_RCC_OscConfig+0x37e>
 8002038:	e014      	b.n	8002064 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7ff fb53 	bl	80016e4 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7ff fb4f 	bl	80016e4 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e095      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	4b4c      	ldr	r3, [pc, #304]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ee      	bne.n	8002042 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d105      	bne.n	8002076 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206a:	4b48      	ldr	r3, [pc, #288]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a47      	ldr	r2, [pc, #284]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8002070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002074:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f000 8081 	beq.w	8002182 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002080:	4b42      	ldr	r3, [pc, #264]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d061      	beq.n	8002150 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d146      	bne.n	8002122 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002094:	4b3f      	ldr	r3, [pc, #252]	; (8002194 <HAL_RCC_OscConfig+0x4fc>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209a:	f7ff fb23 	bl	80016e4 <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a2:	f7ff fb1f 	bl	80016e4 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e067      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b4:	4b35      	ldr	r3, [pc, #212]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1f0      	bne.n	80020a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c8:	d108      	bne.n	80020dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ca:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	492d      	ldr	r1, [pc, #180]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a19      	ldr	r1, [r3, #32]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ec:	430b      	orrs	r3, r1
 80020ee:	4927      	ldr	r1, [pc, #156]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_RCC_OscConfig+0x4fc>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fa:	f7ff faf3 	bl	80016e4 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7ff faef 	bl	80016e4 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e037      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x46a>
 8002120:	e02f      	b.n	8002182 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002122:	4b1c      	ldr	r3, [pc, #112]	; (8002194 <HAL_RCC_OscConfig+0x4fc>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff fadc 	bl	80016e4 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002130:	f7ff fad8 	bl	80016e4 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e020      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x498>
 800214e:	e018      	b.n	8002182 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e013      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_OscConfig+0x4f4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
 8002194:	42420060 	.word	0x42420060

08002198 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0d0      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021ac:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d910      	bls.n	80021dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ba:	4b67      	ldr	r3, [pc, #412]	; (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 0207 	bic.w	r2, r3, #7
 80021c2:	4965      	ldr	r1, [pc, #404]	; (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ca:	4b63      	ldr	r3, [pc, #396]	; (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0b8      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d020      	beq.n	800222a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f4:	4b59      	ldr	r3, [pc, #356]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	4a52      	ldr	r2, [pc, #328]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002216:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002218:	4b50      	ldr	r3, [pc, #320]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	494d      	ldr	r1, [pc, #308]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d040      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b47      	ldr	r3, [pc, #284]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d115      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e07f      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002256:	4b41      	ldr	r3, [pc, #260]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d109      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e073      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e06b      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002276:	4b39      	ldr	r3, [pc, #228]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f023 0203 	bic.w	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4936      	ldr	r1, [pc, #216]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002288:	f7ff fa2c 	bl	80016e4 <HAL_GetTick>
 800228c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002290:	f7ff fa28 	bl	80016e4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	; 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e053      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a6:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 020c 	and.w	r2, r3, #12
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d1eb      	bne.n	8002290 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d210      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 0207 	bic.w	r2, r3, #7
 80022ce:	4922      	ldr	r1, [pc, #136]	; (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e032      	b.n	800234e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f4:	4b19      	ldr	r3, [pc, #100]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4916      	ldr	r1, [pc, #88]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	490e      	ldr	r1, [pc, #56]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	4313      	orrs	r3, r2
 8002324:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002326:	f000 f821 	bl	800236c <HAL_RCC_GetSysClockFreq>
 800232a:	4602      	mov	r2, r0
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	490a      	ldr	r1, [pc, #40]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	5ccb      	ldrb	r3, [r1, r3]
 800233a:	fa22 f303 	lsr.w	r3, r2, r3
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_RCC_ClockConfig+0x1cc>)
 8002340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x1d0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f98a 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40022000 	.word	0x40022000
 800235c:	40021000 	.word	0x40021000
 8002360:	08002e2c 	.word	0x08002e2c
 8002364:	20000034 	.word	0x20000034
 8002368:	20000038 	.word	0x20000038

0800236c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002386:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <HAL_RCC_GetSysClockFreq+0x94>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d002      	beq.n	800239c <HAL_RCC_GetSysClockFreq+0x30>
 8002396:	2b08      	cmp	r3, #8
 8002398:	d003      	beq.n	80023a2 <HAL_RCC_GetSysClockFreq+0x36>
 800239a:	e027      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_GetSysClockFreq+0x98>)
 800239e:	613b      	str	r3, [r7, #16]
      break;
 80023a0:	e027      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	0c9b      	lsrs	r3, r3, #18
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	4a17      	ldr	r2, [pc, #92]	; (8002408 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023ac:	5cd3      	ldrb	r3, [r2, r3]
 80023ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d010      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_RCC_GetSysClockFreq+0x94>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	0c5b      	lsrs	r3, r3, #17
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	4a11      	ldr	r2, [pc, #68]	; (800240c <HAL_RCC_GetSysClockFreq+0xa0>)
 80023c6:	5cd3      	ldrb	r3, [r2, r3]
 80023c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a0d      	ldr	r2, [pc, #52]	; (8002404 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ce:	fb02 f203 	mul.w	r2, r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	e004      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0c      	ldr	r2, [pc, #48]	; (8002410 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	613b      	str	r3, [r7, #16]
      break;
 80023ea:	e002      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ee:	613b      	str	r3, [r7, #16]
      break;
 80023f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023f2:	693b      	ldr	r3, [r7, #16]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
 8002404:	007a1200 	.word	0x007a1200
 8002408:	08002e3c 	.word	0x08002e3c
 800240c:	08002e4c 	.word	0x08002e4c
 8002410:	003d0900 	.word	0x003d0900

08002414 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800241c:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <RCC_Delay+0x34>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0a      	ldr	r2, [pc, #40]	; (800244c <RCC_Delay+0x38>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0a5b      	lsrs	r3, r3, #9
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	fb02 f303 	mul.w	r3, r2, r3
 800242e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002430:	bf00      	nop
  }
  while (Delay --);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1e5a      	subs	r2, r3, #1
 8002436:	60fa      	str	r2, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f9      	bne.n	8002430 <RCC_Delay+0x1c>
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	20000034 	.word	0x20000034
 800244c:	10624dd3 	.word	0x10624dd3

08002450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e041      	b.n	80024e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff f824 	bl	80014c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f000 fa56 	bl	8002940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d001      	beq.n	8002508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e035      	b.n	8002574 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a16      	ldr	r2, [pc, #88]	; (8002580 <HAL_TIM_Base_Start_IT+0x90>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_TIM_Base_Start_IT+0x4e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002532:	d004      	beq.n	800253e <HAL_TIM_Base_Start_IT+0x4e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a12      	ldr	r2, [pc, #72]	; (8002584 <HAL_TIM_Base_Start_IT+0x94>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d111      	bne.n	8002562 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b06      	cmp	r3, #6
 800254e:	d010      	beq.n	8002572 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002560:	e007      	b.n	8002572 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400

08002588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d020      	beq.n	80025ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01b      	beq.n	80025ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0202 	mvn.w	r2, #2
 80025bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f998 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 80025d8:	e005      	b.n	80025e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f98b 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 f99a 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d020      	beq.n	8002638 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01b      	beq.n	8002638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0204 	mvn.w	r2, #4
 8002608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2202      	movs	r2, #2
 800260e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f972 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 8002624:	e005      	b.n	8002632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f965 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f974 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d020      	beq.n	8002684 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01b      	beq.n	8002684 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0208 	mvn.w	r2, #8
 8002654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2204      	movs	r2, #4
 800265a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f94c 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f93f 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f94e 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d020      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01b      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0210 	mvn.w	r2, #16
 80026a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2208      	movs	r2, #8
 80026a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f926 	bl	8002908 <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f919 	bl	80028f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f928 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00c      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0201 	mvn.w	r2, #1
 80026ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe fd60 	bl	80011b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00c      	beq.n	8002718 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa6f 	bl	8002bf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f8f8 	bl	800292c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0320 	and.w	r3, r3, #32
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0220 	mvn.w	r2, #32
 8002758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa42 	bl	8002be4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_TIM_ConfigClockSource+0x1c>
 8002780:	2302      	movs	r3, #2
 8002782:	e0b4      	b.n	80028ee <HAL_TIM_ConfigClockSource+0x186>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027bc:	d03e      	beq.n	800283c <HAL_TIM_ConfigClockSource+0xd4>
 80027be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c2:	f200 8087 	bhi.w	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ca:	f000 8086 	beq.w	80028da <HAL_TIM_ConfigClockSource+0x172>
 80027ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d2:	d87f      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b70      	cmp	r3, #112	; 0x70
 80027d6:	d01a      	beq.n	800280e <HAL_TIM_ConfigClockSource+0xa6>
 80027d8:	2b70      	cmp	r3, #112	; 0x70
 80027da:	d87b      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b60      	cmp	r3, #96	; 0x60
 80027de:	d050      	beq.n	8002882 <HAL_TIM_ConfigClockSource+0x11a>
 80027e0:	2b60      	cmp	r3, #96	; 0x60
 80027e2:	d877      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b50      	cmp	r3, #80	; 0x50
 80027e6:	d03c      	beq.n	8002862 <HAL_TIM_ConfigClockSource+0xfa>
 80027e8:	2b50      	cmp	r3, #80	; 0x50
 80027ea:	d873      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b40      	cmp	r3, #64	; 0x40
 80027ee:	d058      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0x13a>
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	d86f      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b30      	cmp	r3, #48	; 0x30
 80027f6:	d064      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 80027f8:	2b30      	cmp	r3, #48	; 0x30
 80027fa:	d86b      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d060      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002800:	2b20      	cmp	r3, #32
 8002802:	d867      	bhi.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05c      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002808:	2b10      	cmp	r3, #16
 800280a:	d05a      	beq.n	80028c2 <HAL_TIM_ConfigClockSource+0x15a>
 800280c:	e062      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	6899      	ldr	r1, [r3, #8]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f000 f96a 	bl	8002af6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	609a      	str	r2, [r3, #8]
      break;
 800283a:	e04f      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f000 f953 	bl	8002af6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800285e:	609a      	str	r2, [r3, #8]
      break;
 8002860:	e03c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6859      	ldr	r1, [r3, #4]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	461a      	mov	r2, r3
 8002870:	f000 f8ca 	bl	8002a08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2150      	movs	r1, #80	; 0x50
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f921 	bl	8002ac2 <TIM_ITRx_SetConfig>
      break;
 8002880:	e02c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	461a      	mov	r2, r3
 8002890:	f000 f8e8 	bl	8002a64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2160      	movs	r1, #96	; 0x60
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f911 	bl	8002ac2 <TIM_ITRx_SetConfig>
      break;
 80028a0:	e01c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6859      	ldr	r1, [r3, #4]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f000 f8aa 	bl	8002a08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2140      	movs	r1, #64	; 0x40
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f901 	bl	8002ac2 <TIM_ITRx_SetConfig>
      break;
 80028c0:	e00c      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4610      	mov	r0, r2
 80028ce:	f000 f8f8 	bl	8002ac2 <TIM_ITRx_SetConfig>
      break;
 80028d2:	e003      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      break;
 80028d8:	e000      	b.n	80028dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr
	...

08002940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a2b      	ldr	r2, [pc, #172]	; (8002a00 <TIM_Base_SetConfig+0xc0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d007      	beq.n	8002968 <TIM_Base_SetConfig+0x28>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295e:	d003      	beq.n	8002968 <TIM_Base_SetConfig+0x28>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a28      	ldr	r2, [pc, #160]	; (8002a04 <TIM_Base_SetConfig+0xc4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d108      	bne.n	800297a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <TIM_Base_SetConfig+0xc0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d007      	beq.n	8002992 <TIM_Base_SetConfig+0x52>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d003      	beq.n	8002992 <TIM_Base_SetConfig+0x52>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <TIM_Base_SetConfig+0xc4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d108      	bne.n	80029a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <TIM_Base_SetConfig+0xc0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d103      	bne.n	80029d8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	f023 0201 	bic.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]
  }
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40000400 	.word	0x40000400

08002a08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f023 0201 	bic.w	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f023 030a 	bic.w	r3, r3, #10
 8002a44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	621a      	str	r2, [r3, #32]
}
 8002a5a:	bf00      	nop
 8002a5c:	371c      	adds	r7, #28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f023 0210 	bic.w	r2, r3, #16
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	031b      	lsls	r3, r3, #12
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	621a      	str	r2, [r3, #32]
}
 8002ab8:	bf00      	nop
 8002aba:	371c      	adds	r7, #28
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f043 0307 	orr.w	r3, r3, #7
 8002ae4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	609a      	str	r2, [r3, #8]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b087      	sub	sp, #28
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	021a      	lsls	r2, r3, #8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	609a      	str	r2, [r3, #8]
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e041      	b.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d009      	beq.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b98:	d004      	beq.n	8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10c      	bne.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002baa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40012c00 	.word	0x40012c00
 8002be0:	40000400 	.word	0x40000400

08002be4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <__errno>:
 8002c08:	4b01      	ldr	r3, [pc, #4]	; (8002c10 <__errno+0x8>)
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000040 	.word	0x20000040

08002c14 <__libc_init_array>:
 8002c14:	b570      	push	{r4, r5, r6, lr}
 8002c16:	2600      	movs	r6, #0
 8002c18:	4d0c      	ldr	r5, [pc, #48]	; (8002c4c <__libc_init_array+0x38>)
 8002c1a:	4c0d      	ldr	r4, [pc, #52]	; (8002c50 <__libc_init_array+0x3c>)
 8002c1c:	1b64      	subs	r4, r4, r5
 8002c1e:	10a4      	asrs	r4, r4, #2
 8002c20:	42a6      	cmp	r6, r4
 8002c22:	d109      	bne.n	8002c38 <__libc_init_array+0x24>
 8002c24:	f000 f8f6 	bl	8002e14 <_init>
 8002c28:	2600      	movs	r6, #0
 8002c2a:	4d0a      	ldr	r5, [pc, #40]	; (8002c54 <__libc_init_array+0x40>)
 8002c2c:	4c0a      	ldr	r4, [pc, #40]	; (8002c58 <__libc_init_array+0x44>)
 8002c2e:	1b64      	subs	r4, r4, r5
 8002c30:	10a4      	asrs	r4, r4, #2
 8002c32:	42a6      	cmp	r6, r4
 8002c34:	d105      	bne.n	8002c42 <__libc_init_array+0x2e>
 8002c36:	bd70      	pop	{r4, r5, r6, pc}
 8002c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c3c:	4798      	blx	r3
 8002c3e:	3601      	adds	r6, #1
 8002c40:	e7ee      	b.n	8002c20 <__libc_init_array+0xc>
 8002c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c46:	4798      	blx	r3
 8002c48:	3601      	adds	r6, #1
 8002c4a:	e7f2      	b.n	8002c32 <__libc_init_array+0x1e>
 8002c4c:	08002e50 	.word	0x08002e50
 8002c50:	08002e50 	.word	0x08002e50
 8002c54:	08002e50 	.word	0x08002e50
 8002c58:	08002e54 	.word	0x08002e54

08002c5c <malloc>:
 8002c5c:	4b02      	ldr	r3, [pc, #8]	; (8002c68 <malloc+0xc>)
 8002c5e:	4601      	mov	r1, r0
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	f000 b85f 	b.w	8002d24 <_malloc_r>
 8002c66:	bf00      	nop
 8002c68:	20000040 	.word	0x20000040

08002c6c <free>:
 8002c6c:	4b02      	ldr	r3, [pc, #8]	; (8002c78 <free+0xc>)
 8002c6e:	4601      	mov	r1, r0
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	f000 b80b 	b.w	8002c8c <_free_r>
 8002c76:	bf00      	nop
 8002c78:	20000040 	.word	0x20000040

08002c7c <memset>:
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4402      	add	r2, r0
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d100      	bne.n	8002c86 <memset+0xa>
 8002c84:	4770      	bx	lr
 8002c86:	f803 1b01 	strb.w	r1, [r3], #1
 8002c8a:	e7f9      	b.n	8002c80 <memset+0x4>

08002c8c <_free_r>:
 8002c8c:	b538      	push	{r3, r4, r5, lr}
 8002c8e:	4605      	mov	r5, r0
 8002c90:	2900      	cmp	r1, #0
 8002c92:	d043      	beq.n	8002d1c <_free_r+0x90>
 8002c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c98:	1f0c      	subs	r4, r1, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bfb8      	it	lt
 8002c9e:	18e4      	addlt	r4, r4, r3
 8002ca0:	f000 f8aa 	bl	8002df8 <__malloc_lock>
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <_free_r+0x94>)
 8002ca6:	6813      	ldr	r3, [r2, #0]
 8002ca8:	4610      	mov	r0, r2
 8002caa:	b933      	cbnz	r3, 8002cba <_free_r+0x2e>
 8002cac:	6063      	str	r3, [r4, #4]
 8002cae:	6014      	str	r4, [r2, #0]
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cb6:	f000 b8a5 	b.w	8002e04 <__malloc_unlock>
 8002cba:	42a3      	cmp	r3, r4
 8002cbc:	d90a      	bls.n	8002cd4 <_free_r+0x48>
 8002cbe:	6821      	ldr	r1, [r4, #0]
 8002cc0:	1862      	adds	r2, r4, r1
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	bf01      	itttt	eq
 8002cc6:	681a      	ldreq	r2, [r3, #0]
 8002cc8:	685b      	ldreq	r3, [r3, #4]
 8002cca:	1852      	addeq	r2, r2, r1
 8002ccc:	6022      	streq	r2, [r4, #0]
 8002cce:	6063      	str	r3, [r4, #4]
 8002cd0:	6004      	str	r4, [r0, #0]
 8002cd2:	e7ed      	b.n	8002cb0 <_free_r+0x24>
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	b10b      	cbz	r3, 8002cde <_free_r+0x52>
 8002cda:	42a3      	cmp	r3, r4
 8002cdc:	d9fa      	bls.n	8002cd4 <_free_r+0x48>
 8002cde:	6811      	ldr	r1, [r2, #0]
 8002ce0:	1850      	adds	r0, r2, r1
 8002ce2:	42a0      	cmp	r0, r4
 8002ce4:	d10b      	bne.n	8002cfe <_free_r+0x72>
 8002ce6:	6820      	ldr	r0, [r4, #0]
 8002ce8:	4401      	add	r1, r0
 8002cea:	1850      	adds	r0, r2, r1
 8002cec:	4283      	cmp	r3, r0
 8002cee:	6011      	str	r1, [r2, #0]
 8002cf0:	d1de      	bne.n	8002cb0 <_free_r+0x24>
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4401      	add	r1, r0
 8002cf8:	6011      	str	r1, [r2, #0]
 8002cfa:	6053      	str	r3, [r2, #4]
 8002cfc:	e7d8      	b.n	8002cb0 <_free_r+0x24>
 8002cfe:	d902      	bls.n	8002d06 <_free_r+0x7a>
 8002d00:	230c      	movs	r3, #12
 8002d02:	602b      	str	r3, [r5, #0]
 8002d04:	e7d4      	b.n	8002cb0 <_free_r+0x24>
 8002d06:	6820      	ldr	r0, [r4, #0]
 8002d08:	1821      	adds	r1, r4, r0
 8002d0a:	428b      	cmp	r3, r1
 8002d0c:	bf01      	itttt	eq
 8002d0e:	6819      	ldreq	r1, [r3, #0]
 8002d10:	685b      	ldreq	r3, [r3, #4]
 8002d12:	1809      	addeq	r1, r1, r0
 8002d14:	6021      	streq	r1, [r4, #0]
 8002d16:	6063      	str	r3, [r4, #4]
 8002d18:	6054      	str	r4, [r2, #4]
 8002d1a:	e7c9      	b.n	8002cb0 <_free_r+0x24>
 8002d1c:	bd38      	pop	{r3, r4, r5, pc}
 8002d1e:	bf00      	nop
 8002d20:	200000c8 	.word	0x200000c8

08002d24 <_malloc_r>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	1ccd      	adds	r5, r1, #3
 8002d28:	f025 0503 	bic.w	r5, r5, #3
 8002d2c:	3508      	adds	r5, #8
 8002d2e:	2d0c      	cmp	r5, #12
 8002d30:	bf38      	it	cc
 8002d32:	250c      	movcc	r5, #12
 8002d34:	2d00      	cmp	r5, #0
 8002d36:	4606      	mov	r6, r0
 8002d38:	db01      	blt.n	8002d3e <_malloc_r+0x1a>
 8002d3a:	42a9      	cmp	r1, r5
 8002d3c:	d903      	bls.n	8002d46 <_malloc_r+0x22>
 8002d3e:	230c      	movs	r3, #12
 8002d40:	6033      	str	r3, [r6, #0]
 8002d42:	2000      	movs	r0, #0
 8002d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d46:	f000 f857 	bl	8002df8 <__malloc_lock>
 8002d4a:	4921      	ldr	r1, [pc, #132]	; (8002dd0 <_malloc_r+0xac>)
 8002d4c:	680a      	ldr	r2, [r1, #0]
 8002d4e:	4614      	mov	r4, r2
 8002d50:	b99c      	cbnz	r4, 8002d7a <_malloc_r+0x56>
 8002d52:	4f20      	ldr	r7, [pc, #128]	; (8002dd4 <_malloc_r+0xb0>)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b923      	cbnz	r3, 8002d62 <_malloc_r+0x3e>
 8002d58:	4621      	mov	r1, r4
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	f000 f83c 	bl	8002dd8 <_sbrk_r>
 8002d60:	6038      	str	r0, [r7, #0]
 8002d62:	4629      	mov	r1, r5
 8002d64:	4630      	mov	r0, r6
 8002d66:	f000 f837 	bl	8002dd8 <_sbrk_r>
 8002d6a:	1c43      	adds	r3, r0, #1
 8002d6c:	d123      	bne.n	8002db6 <_malloc_r+0x92>
 8002d6e:	230c      	movs	r3, #12
 8002d70:	4630      	mov	r0, r6
 8002d72:	6033      	str	r3, [r6, #0]
 8002d74:	f000 f846 	bl	8002e04 <__malloc_unlock>
 8002d78:	e7e3      	b.n	8002d42 <_malloc_r+0x1e>
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	1b5b      	subs	r3, r3, r5
 8002d7e:	d417      	bmi.n	8002db0 <_malloc_r+0x8c>
 8002d80:	2b0b      	cmp	r3, #11
 8002d82:	d903      	bls.n	8002d8c <_malloc_r+0x68>
 8002d84:	6023      	str	r3, [r4, #0]
 8002d86:	441c      	add	r4, r3
 8002d88:	6025      	str	r5, [r4, #0]
 8002d8a:	e004      	b.n	8002d96 <_malloc_r+0x72>
 8002d8c:	6863      	ldr	r3, [r4, #4]
 8002d8e:	42a2      	cmp	r2, r4
 8002d90:	bf0c      	ite	eq
 8002d92:	600b      	streq	r3, [r1, #0]
 8002d94:	6053      	strne	r3, [r2, #4]
 8002d96:	4630      	mov	r0, r6
 8002d98:	f000 f834 	bl	8002e04 <__malloc_unlock>
 8002d9c:	f104 000b 	add.w	r0, r4, #11
 8002da0:	1d23      	adds	r3, r4, #4
 8002da2:	f020 0007 	bic.w	r0, r0, #7
 8002da6:	1ac2      	subs	r2, r0, r3
 8002da8:	d0cc      	beq.n	8002d44 <_malloc_r+0x20>
 8002daa:	1a1b      	subs	r3, r3, r0
 8002dac:	50a3      	str	r3, [r4, r2]
 8002dae:	e7c9      	b.n	8002d44 <_malloc_r+0x20>
 8002db0:	4622      	mov	r2, r4
 8002db2:	6864      	ldr	r4, [r4, #4]
 8002db4:	e7cc      	b.n	8002d50 <_malloc_r+0x2c>
 8002db6:	1cc4      	adds	r4, r0, #3
 8002db8:	f024 0403 	bic.w	r4, r4, #3
 8002dbc:	42a0      	cmp	r0, r4
 8002dbe:	d0e3      	beq.n	8002d88 <_malloc_r+0x64>
 8002dc0:	1a21      	subs	r1, r4, r0
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f000 f808 	bl	8002dd8 <_sbrk_r>
 8002dc8:	3001      	adds	r0, #1
 8002dca:	d1dd      	bne.n	8002d88 <_malloc_r+0x64>
 8002dcc:	e7cf      	b.n	8002d6e <_malloc_r+0x4a>
 8002dce:	bf00      	nop
 8002dd0:	200000c8 	.word	0x200000c8
 8002dd4:	200000cc 	.word	0x200000cc

08002dd8 <_sbrk_r>:
 8002dd8:	b538      	push	{r3, r4, r5, lr}
 8002dda:	2300      	movs	r3, #0
 8002ddc:	4d05      	ldr	r5, [pc, #20]	; (8002df4 <_sbrk_r+0x1c>)
 8002dde:	4604      	mov	r4, r0
 8002de0:	4608      	mov	r0, r1
 8002de2:	602b      	str	r3, [r5, #0]
 8002de4:	f7fe fbc4 	bl	8001570 <_sbrk>
 8002de8:	1c43      	adds	r3, r0, #1
 8002dea:	d102      	bne.n	8002df2 <_sbrk_r+0x1a>
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	b103      	cbz	r3, 8002df2 <_sbrk_r+0x1a>
 8002df0:	6023      	str	r3, [r4, #0]
 8002df2:	bd38      	pop	{r3, r4, r5, pc}
 8002df4:	200001a0 	.word	0x200001a0

08002df8 <__malloc_lock>:
 8002df8:	4801      	ldr	r0, [pc, #4]	; (8002e00 <__malloc_lock+0x8>)
 8002dfa:	f000 b809 	b.w	8002e10 <__retarget_lock_acquire_recursive>
 8002dfe:	bf00      	nop
 8002e00:	200001a8 	.word	0x200001a8

08002e04 <__malloc_unlock>:
 8002e04:	4801      	ldr	r0, [pc, #4]	; (8002e0c <__malloc_unlock+0x8>)
 8002e06:	f000 b804 	b.w	8002e12 <__retarget_lock_release_recursive>
 8002e0a:	bf00      	nop
 8002e0c:	200001a8 	.word	0x200001a8

08002e10 <__retarget_lock_acquire_recursive>:
 8002e10:	4770      	bx	lr

08002e12 <__retarget_lock_release_recursive>:
 8002e12:	4770      	bx	lr

08002e14 <_init>:
 8002e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e16:	bf00      	nop
 8002e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1a:	bc08      	pop	{r3}
 8002e1c:	469e      	mov	lr, r3
 8002e1e:	4770      	bx	lr

08002e20 <_fini>:
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	bf00      	nop
 8002e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e26:	bc08      	pop	{r3}
 8002e28:	469e      	mov	lr, r3
 8002e2a:	4770      	bx	lr
